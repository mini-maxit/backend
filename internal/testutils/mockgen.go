// Code generated by MockGen. DO NOT EDIT.
// Source: ./package/repository (interfaces: SubmissionRepository)
//
// Generated by this command:
//
//	mockgen -destination internal/testutils/mockgen.go ./package/repository SubmissionRepository
//

// Package mock_repository is a generated GoMock package.
package testutils

import (
	reflect "reflect"

	models "github.com/mini-maxit/backend/package/domain/models"
	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockSubmissionRepository is a mock of SubmissionRepository interface.
type MockSubmissionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSubmissionRepositoryMockRecorder
	isgomock struct{}
}

// MockSubmissionRepositoryMockRecorder is the mock recorder for MockSubmissionRepository.
type MockSubmissionRepositoryMockRecorder struct {
	mock *MockSubmissionRepository
}

// NewMockSubmissionRepository creates a new mock instance.
func NewMockSubmissionRepository(ctrl *gomock.Controller) *MockSubmissionRepository {
	mock := &MockSubmissionRepository{ctrl: ctrl}
	mock.recorder = &MockSubmissionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubmissionRepository) EXPECT() *MockSubmissionRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSubmissionRepository) Create(tx *gorm.DB, submission *models.Submission) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", tx, submission)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSubmissionRepositoryMockRecorder) Create(tx, submission any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSubmissionRepository)(nil).Create), tx, submission)
}

// Get mocks base method.
func (m *MockSubmissionRepository) Get(tx *gorm.DB, submissionId int64) (*models.Submission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", tx, submissionId)
	ret0, _ := ret[0].(*models.Submission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSubmissionRepositoryMockRecorder) Get(tx, submissionId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSubmissionRepository)(nil).Get), tx, submissionId)
}

// GetAll mocks base method.
func (m *MockSubmissionRepository) GetAll(tx *gorm.DB, limit, offset int, sort string) ([]models.Submission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", tx, limit, offset, sort)
	ret0, _ := ret[0].([]models.Submission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockSubmissionRepositoryMockRecorder) GetAll(tx, limit, offset, sort any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockSubmissionRepository)(nil).GetAll), tx, limit, offset, sort)
}

// GetAllByUser mocks base method.
func (m *MockSubmissionRepository) GetAllByUser(tx *gorm.DB, userId int64, limit, offset int, sort string) ([]models.Submission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByUser", tx, userId, limit, offset, sort)
	ret0, _ := ret[0].([]models.Submission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByUser indicates an expected call of GetAllByUser.
func (mr *MockSubmissionRepositoryMockRecorder) GetAllByUser(tx, userId, limit, offset, sort any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByUser", reflect.TypeOf((*MockSubmissionRepository)(nil).GetAllByUser), tx, userId, limit, offset, sort)
}

// GetAllForGroup mocks base method.
func (m *MockSubmissionRepository) GetAllForGroup(tx *gorm.DB, groupId int64, limit, offset int, sort string) ([]models.Submission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllForGroup", tx, groupId, limit, offset, sort)
	ret0, _ := ret[0].([]models.Submission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllForGroup indicates an expected call of GetAllForGroup.
func (mr *MockSubmissionRepositoryMockRecorder) GetAllForGroup(tx, groupId, limit, offset, sort any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllForGroup", reflect.TypeOf((*MockSubmissionRepository)(nil).GetAllForGroup), tx, groupId, limit, offset, sort)
}

// GetAllForTask mocks base method.
func (m *MockSubmissionRepository) GetAllForTask(tx *gorm.DB, taskId int64, limit, offset int, sort string) ([]models.Submission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllForTask", tx, taskId, limit, offset, sort)
	ret0, _ := ret[0].([]models.Submission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllForTask indicates an expected call of GetAllForTask.
func (mr *MockSubmissionRepositoryMockRecorder) GetAllForTask(tx, taskId, limit, offset, sort any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllForTask", reflect.TypeOf((*MockSubmissionRepository)(nil).GetAllForTask), tx, taskId, limit, offset, sort)
}

// GetAllForTaskByUser mocks base method.
func (m *MockSubmissionRepository) GetAllForTaskByUser(tx *gorm.DB, taskId, userId int64, limit, offset int, sort string) ([]models.Submission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllForTaskByUser", tx, taskId, userId, limit, offset, sort)
	ret0, _ := ret[0].([]models.Submission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllForTaskByUser indicates an expected call of GetAllForTaskByUser.
func (mr *MockSubmissionRepositoryMockRecorder) GetAllForTaskByUser(tx, taskId, userId, limit, offset, sort any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllForTaskByUser", reflect.TypeOf((*MockSubmissionRepository)(nil).GetAllForTaskByUser), tx, taskId, userId, limit, offset, sort)
}

// GetAllForTeacher mocks base method.
func (m *MockSubmissionRepository) GetAllForTeacher(tx *gorm.DB, currentUserId int64, limit, offset int, sort string) ([]models.Submission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllForTeacher", tx, currentUserId, limit, offset, sort)
	ret0, _ := ret[0].([]models.Submission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllForTeacher indicates an expected call of GetAllForTeacher.
func (mr *MockSubmissionRepositoryMockRecorder) GetAllForTeacher(tx, currentUserId, limit, offset, sort any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllForTeacher", reflect.TypeOf((*MockSubmissionRepository)(nil).GetAllForTeacher), tx, currentUserId, limit, offset, sort)
}

// MarkComplete mocks base method.
func (m *MockSubmissionRepository) MarkComplete(tx *gorm.DB, submissionId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkComplete", tx, submissionId)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkComplete indicates an expected call of MarkComplete.
func (mr *MockSubmissionRepositoryMockRecorder) MarkComplete(tx, submissionId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkComplete", reflect.TypeOf((*MockSubmissionRepository)(nil).MarkComplete), tx, submissionId)
}

// MarkFailed mocks base method.
func (m *MockSubmissionRepository) MarkFailed(db *gorm.DB, submissionId int64, errorMsg string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkFailed", db, submissionId, errorMsg)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkFailed indicates an expected call of MarkFailed.
func (mr *MockSubmissionRepositoryMockRecorder) MarkFailed(db, submissionId, errorMsg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkFailed", reflect.TypeOf((*MockSubmissionRepository)(nil).MarkFailed), db, submissionId, errorMsg)
}

// MarkProcessing mocks base method.
func (m *MockSubmissionRepository) MarkProcessing(tx *gorm.DB, submissionId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkProcessing", tx, submissionId)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkProcessing indicates an expected call of MarkProcessing.
func (mr *MockSubmissionRepositoryMockRecorder) MarkProcessing(tx, submissionId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkProcessing", reflect.TypeOf((*MockSubmissionRepository)(nil).MarkProcessing), tx, submissionId)
}
