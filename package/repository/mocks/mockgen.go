// Code generated by MockGen. DO NOT EDIT.
// Source: ./package/repository (interfaces: ContestRepository,UserRepository,TaskRepository,GroupRepository,SubmissionRepository,SubmissionResultRepository,LanguageRepository,TestCaseRepository,QueueMessageRepository,TestRepository,File)
//
// Generated by this command:
//
//	mockgen -destination package/repository/mocks/mockgen.go ./package/repository ContestRepository,UserRepository,TaskRepository,GroupRepository,SubmissionRepository,SubmissionResultRepository,LanguageRepository,TestCaseRepository,QueueMessageRepository,TestRepository,File
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	models "github.com/mini-maxit/backend/package/domain/models"
	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockContestRepository is a mock of ContestRepository interface.
type MockContestRepository struct {
	ctrl     *gomock.Controller
	recorder *MockContestRepositoryMockRecorder
	isgomock struct{}
}

// MockContestRepositoryMockRecorder is the mock recorder for MockContestRepository.
type MockContestRepositoryMockRecorder struct {
	mock *MockContestRepository
}

// NewMockContestRepository creates a new mock instance.
func NewMockContestRepository(ctrl *gomock.Controller) *MockContestRepository {
	mock := &MockContestRepository{ctrl: ctrl}
	mock.recorder = &MockContestRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContestRepository) EXPECT() *MockContestRepositoryMockRecorder {
	return m.recorder
}

// AddTaskToContest mocks base method.
func (m *MockContestRepository) AddTaskToContest(tx *gorm.DB, taskContest models.ContestTask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTaskToContest", tx, taskContest)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTaskToContest indicates an expected call of AddTaskToContest.
func (mr *MockContestRepositoryMockRecorder) AddTaskToContest(tx, taskContest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTaskToContest", reflect.TypeOf((*MockContestRepository)(nil).AddTaskToContest), tx, taskContest)
}

// Create mocks base method.
func (m *MockContestRepository) Create(tx *gorm.DB, contest *models.Contest) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", tx, contest)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockContestRepositoryMockRecorder) Create(tx, contest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockContestRepository)(nil).Create), tx, contest)
}

// CreatePendingRegistration mocks base method.
func (m *MockContestRepository) CreatePendingRegistration(tx *gorm.DB, registration *models.ContestPendingRegistration) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePendingRegistration", tx, registration)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePendingRegistration indicates an expected call of CreatePendingRegistration.
func (mr *MockContestRepositoryMockRecorder) CreatePendingRegistration(tx, registration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePendingRegistration", reflect.TypeOf((*MockContestRepository)(nil).CreatePendingRegistration), tx, registration)
}

// Delete mocks base method.
func (m *MockContestRepository) Delete(tx *gorm.DB, contestID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", tx, contestID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockContestRepositoryMockRecorder) Delete(tx, contestID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockContestRepository)(nil).Delete), tx, contestID)
}

// Edit mocks base method.
func (m *MockContestRepository) Edit(tx *gorm.DB, contestID int64, contest *models.Contest) (*models.Contest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", tx, contestID, contest)
	ret0, _ := ret[0].(*models.Contest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Edit indicates an expected call of Edit.
func (mr *MockContestRepositoryMockRecorder) Edit(tx, contestID, contest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockContestRepository)(nil).Edit), tx, contestID, contest)
}

// Get mocks base method.
func (m *MockContestRepository) Get(tx *gorm.DB, contestID int64) (*models.Contest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", tx, contestID)
	ret0, _ := ret[0].(*models.Contest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockContestRepositoryMockRecorder) Get(tx, contestID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockContestRepository)(nil).Get), tx, contestID)
}

// GetAll mocks base method.
func (m *MockContestRepository) GetAll(tx *gorm.DB, offset, limit int, sort string) ([]models.Contest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", tx, offset, limit, sort)
	ret0, _ := ret[0].([]models.Contest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockContestRepositoryMockRecorder) GetAll(tx, offset, limit, sort any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockContestRepository)(nil).GetAll), tx, offset, limit, sort)
}

// GetAllForCreator mocks base method.
func (m *MockContestRepository) GetAllForCreator(tx *gorm.DB, creatorID int64, offset, limit int, sort string) ([]models.Contest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllForCreator", tx, creatorID, offset, limit, sort)
	ret0, _ := ret[0].([]models.Contest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllForCreator indicates an expected call of GetAllForCreator.
func (mr *MockContestRepositoryMockRecorder) GetAllForCreator(tx, creatorID, offset, limit, sort any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllForCreator", reflect.TypeOf((*MockContestRepository)(nil).GetAllForCreator), tx, creatorID, offset, limit, sort)
}

// GetAllWithStats mocks base method.
func (m *MockContestRepository) GetAllWithStats(tx *gorm.DB, userID int64, offset, limit int, sort string) ([]models.ContestWithStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllWithStats", tx, userID, offset, limit, sort)
	ret0, _ := ret[0].([]models.ContestWithStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllWithStats indicates an expected call of GetAllWithStats.
func (mr *MockContestRepositoryMockRecorder) GetAllWithStats(tx, userID, offset, limit, sort any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllWithStats", reflect.TypeOf((*MockContestRepository)(nil).GetAllWithStats), tx, userID, offset, limit, sort)
}

// GetContestsForUserWithStats mocks base method.
func (m *MockContestRepository) GetContestsForUserWithStats(tx *gorm.DB, userID int64) ([]models.ParticipantContestStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContestsForUserWithStats", tx, userID)
	ret0, _ := ret[0].([]models.ParticipantContestStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContestsForUserWithStats indicates an expected call of GetContestsForUserWithStats.
func (mr *MockContestRepositoryMockRecorder) GetContestsForUserWithStats(tx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContestsForUserWithStats", reflect.TypeOf((*MockContestRepository)(nil).GetContestsForUserWithStats), tx, userID)
}

// GetOngoingContestsWithStats mocks base method.
func (m *MockContestRepository) GetOngoingContestsWithStats(tx *gorm.DB, userID int64, offset, limit int, sort string) ([]models.ContestWithStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOngoingContestsWithStats", tx, userID, offset, limit, sort)
	ret0, _ := ret[0].([]models.ContestWithStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOngoingContestsWithStats indicates an expected call of GetOngoingContestsWithStats.
func (mr *MockContestRepositoryMockRecorder) GetOngoingContestsWithStats(tx, userID, offset, limit, sort any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOngoingContestsWithStats", reflect.TypeOf((*MockContestRepository)(nil).GetOngoingContestsWithStats), tx, userID, offset, limit, sort)
}

// GetPastContestsWithStats mocks base method.
func (m *MockContestRepository) GetPastContestsWithStats(tx *gorm.DB, userID int64, offset, limit int, sort string) ([]models.ContestWithStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPastContestsWithStats", tx, userID, offset, limit, sort)
	ret0, _ := ret[0].([]models.ContestWithStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPastContestsWithStats indicates an expected call of GetPastContestsWithStats.
func (mr *MockContestRepositoryMockRecorder) GetPastContestsWithStats(tx, userID, offset, limit, sort any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPastContestsWithStats", reflect.TypeOf((*MockContestRepository)(nil).GetPastContestsWithStats), tx, userID, offset, limit, sort)
}

// GetTasksForContest mocks base method.
func (m *MockContestRepository) GetTasksForContest(tx *gorm.DB, contestID int64, taskNameFilter string) ([]models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTasksForContest", tx, contestID, taskNameFilter)
	ret0, _ := ret[0].([]models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTasksForContest indicates an expected call of GetTasksForContest.
func (mr *MockContestRepositoryMockRecorder) GetTasksForContest(tx, contestID, taskNameFilter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTasksForContest", reflect.TypeOf((*MockContestRepository)(nil).GetTasksForContest), tx, contestID, taskNameFilter)
}

// GetTasksForContestWithStats mocks base method.
func (m *MockContestRepository) GetTasksForContestWithStats(tx *gorm.DB, contestID, userID int64) ([]models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTasksForContestWithStats", tx, contestID, userID)
	ret0, _ := ret[0].([]models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTasksForContestWithStats indicates an expected call of GetTasksForContestWithStats.
func (mr *MockContestRepositoryMockRecorder) GetTasksForContestWithStats(tx, contestID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTasksForContestWithStats", reflect.TypeOf((*MockContestRepository)(nil).GetTasksForContestWithStats), tx, contestID, userID)
}

// GetUpcomingContestsWithStats mocks base method.
func (m *MockContestRepository) GetUpcomingContestsWithStats(tx *gorm.DB, userID int64, offset, limit int, sort string) ([]models.ContestWithStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpcomingContestsWithStats", tx, userID, offset, limit, sort)
	ret0, _ := ret[0].([]models.ContestWithStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUpcomingContestsWithStats indicates an expected call of GetUpcomingContestsWithStats.
func (mr *MockContestRepositoryMockRecorder) GetUpcomingContestsWithStats(tx, userID, offset, limit, sort any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpcomingContestsWithStats", reflect.TypeOf((*MockContestRepository)(nil).GetUpcomingContestsWithStats), tx, userID, offset, limit, sort)
}

// IsPendingRegistrationExists mocks base method.
func (m *MockContestRepository) IsPendingRegistrationExists(tx *gorm.DB, contestID, userID int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPendingRegistrationExists", tx, contestID, userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsPendingRegistrationExists indicates an expected call of IsPendingRegistrationExists.
func (mr *MockContestRepositoryMockRecorder) IsPendingRegistrationExists(tx, contestID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPendingRegistrationExists", reflect.TypeOf((*MockContestRepository)(nil).IsPendingRegistrationExists), tx, contestID, userID)
}

// IsUserParticipant mocks base method.
func (m *MockContestRepository) IsUserParticipant(tx *gorm.DB, contestID, userID int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUserParticipant", tx, contestID, userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsUserParticipant indicates an expected call of IsUserParticipant.
func (mr *MockContestRepositoryMockRecorder) IsUserParticipant(tx, contestID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUserParticipant", reflect.TypeOf((*MockContestRepository)(nil).IsUserParticipant), tx, contestID, userID)
}

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
	isgomock struct{}
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserRepository) Create(tx *gorm.DB, user *models.User) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", tx, user)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserRepositoryMockRecorder) Create(tx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserRepository)(nil).Create), tx, user)
}

// Edit mocks base method.
func (m *MockUserRepository) Edit(tx *gorm.DB, user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", tx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Edit indicates an expected call of Edit.
func (mr *MockUserRepositoryMockRecorder) Edit(tx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockUserRepository)(nil).Edit), tx, user)
}

// Get mocks base method.
func (m *MockUserRepository) Get(tx *gorm.DB, userID int64) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", tx, userID)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUserRepositoryMockRecorder) Get(tx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUserRepository)(nil).Get), tx, userID)
}

// GetAll mocks base method.
func (m *MockUserRepository) GetAll(tx *gorm.DB, limit, offset int, sort string) ([]models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", tx, limit, offset, sort)
	ret0, _ := ret[0].([]models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockUserRepositoryMockRecorder) GetAll(tx, limit, offset, sort any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockUserRepository)(nil).GetAll), tx, limit, offset, sort)
}

// GetByEmail mocks base method.
func (m *MockUserRepository) GetByEmail(tx *gorm.DB, email string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", tx, email)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockUserRepositoryMockRecorder) GetByEmail(tx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockUserRepository)(nil).GetByEmail), tx, email)
}

// MockTaskRepository is a mock of TaskRepository interface.
type MockTaskRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTaskRepositoryMockRecorder
	isgomock struct{}
}

// MockTaskRepositoryMockRecorder is the mock recorder for MockTaskRepository.
type MockTaskRepositoryMockRecorder struct {
	mock *MockTaskRepository
}

// NewMockTaskRepository creates a new mock instance.
func NewMockTaskRepository(ctrl *gomock.Controller) *MockTaskRepository {
	mock := &MockTaskRepository{ctrl: ctrl}
	mock.recorder = &MockTaskRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskRepository) EXPECT() *MockTaskRepositoryMockRecorder {
	return m.recorder
}

// AssignToGroup mocks base method.
func (m *MockTaskRepository) AssignToGroup(tx *gorm.DB, taskID, groupID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignToGroup", tx, taskID, groupID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignToGroup indicates an expected call of AssignToGroup.
func (mr *MockTaskRepositoryMockRecorder) AssignToGroup(tx, taskID, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignToGroup", reflect.TypeOf((*MockTaskRepository)(nil).AssignToGroup), tx, taskID, groupID)
}

// AssignToUser mocks base method.
func (m *MockTaskRepository) AssignToUser(tx *gorm.DB, taskID, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignToUser", tx, taskID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignToUser indicates an expected call of AssignToUser.
func (mr *MockTaskRepositoryMockRecorder) AssignToUser(tx, taskID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignToUser", reflect.TypeOf((*MockTaskRepository)(nil).AssignToUser), tx, taskID, userID)
}

// Create mocks base method.
func (m *MockTaskRepository) Create(tx *gorm.DB, task *models.Task) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", tx, task)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTaskRepositoryMockRecorder) Create(tx, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTaskRepository)(nil).Create), tx, task)
}

// Delete mocks base method.
func (m *MockTaskRepository) Delete(tx *gorm.DB, taskID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", tx, taskID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTaskRepositoryMockRecorder) Delete(tx, taskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTaskRepository)(nil).Delete), tx, taskID)
}

// Edit mocks base method.
func (m *MockTaskRepository) Edit(tx *gorm.DB, taskID int64, task *models.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", tx, taskID, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// Edit indicates an expected call of Edit.
func (mr *MockTaskRepositoryMockRecorder) Edit(tx, taskID, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockTaskRepository)(nil).Edit), tx, taskID, task)
}

// Get mocks base method.
func (m *MockTaskRepository) Get(tx *gorm.DB, taskID int64) (*models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", tx, taskID)
	ret0, _ := ret[0].(*models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTaskRepositoryMockRecorder) Get(tx, taskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTaskRepository)(nil).Get), tx, taskID)
}

// GetAll mocks base method.
func (m *MockTaskRepository) GetAll(tx *gorm.DB, limit, offset int, sort, titleFilter string) ([]models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", tx, limit, offset, sort, titleFilter)
	ret0, _ := ret[0].([]models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockTaskRepositoryMockRecorder) GetAll(tx, limit, offset, sort, titleFilter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockTaskRepository)(nil).GetAll), tx, limit, offset, sort, titleFilter)
}

// GetAllAssigned mocks base method.
func (m *MockTaskRepository) GetAllAssigned(tx *gorm.DB, userID int64, limit, offset int, sort string) ([]models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAssigned", tx, userID, limit, offset, sort)
	ret0, _ := ret[0].([]models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAssigned indicates an expected call of GetAllAssigned.
func (mr *MockTaskRepositoryMockRecorder) GetAllAssigned(tx, userID, limit, offset, sort any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAssigned", reflect.TypeOf((*MockTaskRepository)(nil).GetAllAssigned), tx, userID, limit, offset, sort)
}

// GetAllCreated mocks base method.
func (m *MockTaskRepository) GetAllCreated(tx *gorm.DB, userID int64, limit, offset int, sort string) ([]models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCreated", tx, userID, limit, offset, sort)
	ret0, _ := ret[0].([]models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCreated indicates an expected call of GetAllCreated.
func (mr *MockTaskRepositoryMockRecorder) GetAllCreated(tx, userID, limit, offset, sort any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCreated", reflect.TypeOf((*MockTaskRepository)(nil).GetAllCreated), tx, userID, limit, offset, sort)
}

// GetAllForGroup mocks base method.
func (m *MockTaskRepository) GetAllForGroup(tx *gorm.DB, groupID int64, limit, offset int, sort string) ([]models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllForGroup", tx, groupID, limit, offset, sort)
	ret0, _ := ret[0].([]models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllForGroup indicates an expected call of GetAllForGroup.
func (mr *MockTaskRepositoryMockRecorder) GetAllForGroup(tx, groupID, limit, offset, sort any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllForGroup", reflect.TypeOf((*MockTaskRepository)(nil).GetAllForGroup), tx, groupID, limit, offset, sort)
}

// GetByTitle mocks base method.
func (m *MockTaskRepository) GetByTitle(tx *gorm.DB, title string) (*models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTitle", tx, title)
	ret0, _ := ret[0].(*models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTitle indicates an expected call of GetByTitle.
func (mr *MockTaskRepositoryMockRecorder) GetByTitle(tx, title any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTitle", reflect.TypeOf((*MockTaskRepository)(nil).GetByTitle), tx, title)
}

// IsAssignedToGroup mocks base method.
func (m *MockTaskRepository) IsAssignedToGroup(tx *gorm.DB, taskID, groupID int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAssignedToGroup", tx, taskID, groupID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAssignedToGroup indicates an expected call of IsAssignedToGroup.
func (mr *MockTaskRepositoryMockRecorder) IsAssignedToGroup(tx, taskID, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAssignedToGroup", reflect.TypeOf((*MockTaskRepository)(nil).IsAssignedToGroup), tx, taskID, groupID)
}

// IsAssignedToUser mocks base method.
func (m *MockTaskRepository) IsAssignedToUser(tx *gorm.DB, taskID, userID int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAssignedToUser", tx, taskID, userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAssignedToUser indicates an expected call of IsAssignedToUser.
func (mr *MockTaskRepositoryMockRecorder) IsAssignedToUser(tx, taskID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAssignedToUser", reflect.TypeOf((*MockTaskRepository)(nil).IsAssignedToUser), tx, taskID, userID)
}

// UnassignFromGroup mocks base method.
func (m *MockTaskRepository) UnassignFromGroup(tx *gorm.DB, taskID, groupID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnassignFromGroup", tx, taskID, groupID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnassignFromGroup indicates an expected call of UnassignFromGroup.
func (mr *MockTaskRepositoryMockRecorder) UnassignFromGroup(tx, taskID, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnassignFromGroup", reflect.TypeOf((*MockTaskRepository)(nil).UnassignFromGroup), tx, taskID, groupID)
}

// UnassignFromUser mocks base method.
func (m *MockTaskRepository) UnassignFromUser(tx *gorm.DB, taskID, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnassignFromUser", tx, taskID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnassignFromUser indicates an expected call of UnassignFromUser.
func (mr *MockTaskRepositoryMockRecorder) UnassignFromUser(tx, taskID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnassignFromUser", reflect.TypeOf((*MockTaskRepository)(nil).UnassignFromUser), tx, taskID, userID)
}

// MockGroupRepository is a mock of GroupRepository interface.
type MockGroupRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGroupRepositoryMockRecorder
	isgomock struct{}
}

// MockGroupRepositoryMockRecorder is the mock recorder for MockGroupRepository.
type MockGroupRepositoryMockRecorder struct {
	mock *MockGroupRepository
}

// NewMockGroupRepository creates a new mock instance.
func NewMockGroupRepository(ctrl *gomock.Controller) *MockGroupRepository {
	mock := &MockGroupRepository{ctrl: ctrl}
	mock.recorder = &MockGroupRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupRepository) EXPECT() *MockGroupRepositoryMockRecorder {
	return m.recorder
}

// AddUser mocks base method.
func (m *MockGroupRepository) AddUser(tx *gorm.DB, groupID, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", tx, groupID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUser indicates an expected call of AddUser.
func (mr *MockGroupRepositoryMockRecorder) AddUser(tx, groupID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockGroupRepository)(nil).AddUser), tx, groupID, userID)
}

// Create mocks base method.
func (m *MockGroupRepository) Create(tx *gorm.DB, group *models.Group) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", tx, group)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockGroupRepositoryMockRecorder) Create(tx, group any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockGroupRepository)(nil).Create), tx, group)
}

// Delete mocks base method.
func (m *MockGroupRepository) Delete(tx *gorm.DB, groupID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", tx, groupID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockGroupRepositoryMockRecorder) Delete(tx, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockGroupRepository)(nil).Delete), tx, groupID)
}

// DeleteUser mocks base method.
func (m *MockGroupRepository) DeleteUser(tx *gorm.DB, groupID, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", tx, groupID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockGroupRepositoryMockRecorder) DeleteUser(tx, groupID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockGroupRepository)(nil).DeleteUser), tx, groupID, userID)
}

// Edit mocks base method.
func (m *MockGroupRepository) Edit(tx *gorm.DB, groupID int64, group *models.Group) (*models.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", tx, groupID, group)
	ret0, _ := ret[0].(*models.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Edit indicates an expected call of Edit.
func (mr *MockGroupRepositoryMockRecorder) Edit(tx, groupID, group any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockGroupRepository)(nil).Edit), tx, groupID, group)
}

// Get mocks base method.
func (m *MockGroupRepository) Get(tx *gorm.DB, groupID int64) (*models.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", tx, groupID)
	ret0, _ := ret[0].(*models.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockGroupRepositoryMockRecorder) Get(tx, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockGroupRepository)(nil).Get), tx, groupID)
}

// GetAll mocks base method.
func (m *MockGroupRepository) GetAll(tx *gorm.DB, offset, limit int, sort string) ([]models.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", tx, offset, limit, sort)
	ret0, _ := ret[0].([]models.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockGroupRepositoryMockRecorder) GetAll(tx, offset, limit, sort any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockGroupRepository)(nil).GetAll), tx, offset, limit, sort)
}

// GetAllForTeacher mocks base method.
func (m *MockGroupRepository) GetAllForTeacher(tx *gorm.DB, teacherID int64, offset, limit int, sort string) ([]models.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllForTeacher", tx, teacherID, offset, limit, sort)
	ret0, _ := ret[0].([]models.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllForTeacher indicates an expected call of GetAllForTeacher.
func (mr *MockGroupRepositoryMockRecorder) GetAllForTeacher(tx, teacherID, offset, limit, sort any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllForTeacher", reflect.TypeOf((*MockGroupRepository)(nil).GetAllForTeacher), tx, teacherID, offset, limit, sort)
}

// GetTasks mocks base method.
func (m *MockGroupRepository) GetTasks(tx *gorm.DB, groupID int64) ([]models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTasks", tx, groupID)
	ret0, _ := ret[0].([]models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTasks indicates an expected call of GetTasks.
func (mr *MockGroupRepositoryMockRecorder) GetTasks(tx, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTasks", reflect.TypeOf((*MockGroupRepository)(nil).GetTasks), tx, groupID)
}

// GetUsers mocks base method.
func (m *MockGroupRepository) GetUsers(tx *gorm.DB, groupID int64) ([]models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", tx, groupID)
	ret0, _ := ret[0].([]models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockGroupRepositoryMockRecorder) GetUsers(tx, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockGroupRepository)(nil).GetUsers), tx, groupID)
}

// UserBelongsTo mocks base method.
func (m *MockGroupRepository) UserBelongsTo(tx *gorm.DB, groupID, userID int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserBelongsTo", tx, groupID, userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserBelongsTo indicates an expected call of UserBelongsTo.
func (mr *MockGroupRepositoryMockRecorder) UserBelongsTo(tx, groupID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserBelongsTo", reflect.TypeOf((*MockGroupRepository)(nil).UserBelongsTo), tx, groupID, userID)
}

// MockSubmissionRepository is a mock of SubmissionRepository interface.
type MockSubmissionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSubmissionRepositoryMockRecorder
	isgomock struct{}
}

// MockSubmissionRepositoryMockRecorder is the mock recorder for MockSubmissionRepository.
type MockSubmissionRepositoryMockRecorder struct {
	mock *MockSubmissionRepository
}

// NewMockSubmissionRepository creates a new mock instance.
func NewMockSubmissionRepository(ctrl *gomock.Controller) *MockSubmissionRepository {
	mock := &MockSubmissionRepository{ctrl: ctrl}
	mock.recorder = &MockSubmissionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubmissionRepository) EXPECT() *MockSubmissionRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSubmissionRepository) Create(tx *gorm.DB, submission *models.Submission) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", tx, submission)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSubmissionRepositoryMockRecorder) Create(tx, submission any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSubmissionRepository)(nil).Create), tx, submission)
}

// Get mocks base method.
func (m *MockSubmissionRepository) Get(tx *gorm.DB, submissionID int64) (*models.Submission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", tx, submissionID)
	ret0, _ := ret[0].(*models.Submission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSubmissionRepositoryMockRecorder) Get(tx, submissionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSubmissionRepository)(nil).Get), tx, submissionID)
}

// GetAll mocks base method.
func (m *MockSubmissionRepository) GetAll(tx *gorm.DB, limit, offset int, sort string) ([]models.Submission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", tx, limit, offset, sort)
	ret0, _ := ret[0].([]models.Submission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockSubmissionRepositoryMockRecorder) GetAll(tx, limit, offset, sort any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockSubmissionRepository)(nil).GetAll), tx, limit, offset, sort)
}

// GetAllByUser mocks base method.
func (m *MockSubmissionRepository) GetAllByUser(tx *gorm.DB, userID int64, limit, offset int, sort string) ([]models.Submission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByUser", tx, userID, limit, offset, sort)
	ret0, _ := ret[0].([]models.Submission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByUser indicates an expected call of GetAllByUser.
func (mr *MockSubmissionRepositoryMockRecorder) GetAllByUser(tx, userID, limit, offset, sort any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByUser", reflect.TypeOf((*MockSubmissionRepository)(nil).GetAllByUser), tx, userID, limit, offset, sort)
}

// GetAllForGroup mocks base method.
func (m *MockSubmissionRepository) GetAllForGroup(tx *gorm.DB, groupID int64, limit, offset int, sort string) ([]models.Submission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllForGroup", tx, groupID, limit, offset, sort)
	ret0, _ := ret[0].([]models.Submission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllForGroup indicates an expected call of GetAllForGroup.
func (mr *MockSubmissionRepositoryMockRecorder) GetAllForGroup(tx, groupID, limit, offset, sort any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllForGroup", reflect.TypeOf((*MockSubmissionRepository)(nil).GetAllForGroup), tx, groupID, limit, offset, sort)
}

// GetAllForTask mocks base method.
func (m *MockSubmissionRepository) GetAllForTask(tx *gorm.DB, taskID int64, limit, offset int, sort string) ([]models.Submission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllForTask", tx, taskID, limit, offset, sort)
	ret0, _ := ret[0].([]models.Submission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllForTask indicates an expected call of GetAllForTask.
func (mr *MockSubmissionRepositoryMockRecorder) GetAllForTask(tx, taskID, limit, offset, sort any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllForTask", reflect.TypeOf((*MockSubmissionRepository)(nil).GetAllForTask), tx, taskID, limit, offset, sort)
}

// GetAllForTaskByUser mocks base method.
func (m *MockSubmissionRepository) GetAllForTaskByUser(tx *gorm.DB, taskID, userID int64, limit, offset int, sort string) ([]models.Submission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllForTaskByUser", tx, taskID, userID, limit, offset, sort)
	ret0, _ := ret[0].([]models.Submission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllForTaskByUser indicates an expected call of GetAllForTaskByUser.
func (mr *MockSubmissionRepositoryMockRecorder) GetAllForTaskByUser(tx, taskID, userID, limit, offset, sort any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllForTaskByUser", reflect.TypeOf((*MockSubmissionRepository)(nil).GetAllForTaskByUser), tx, taskID, userID, limit, offset, sort)
}

// GetAllForTeacher mocks base method.
func (m *MockSubmissionRepository) GetAllForTeacher(tx *gorm.DB, currentUserID int64, limit, offset int, sort string) ([]models.Submission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllForTeacher", tx, currentUserID, limit, offset, sort)
	ret0, _ := ret[0].([]models.Submission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllForTeacher indicates an expected call of GetAllForTeacher.
func (mr *MockSubmissionRepositoryMockRecorder) GetAllForTeacher(tx, currentUserID, limit, offset, sort any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllForTeacher", reflect.TypeOf((*MockSubmissionRepository)(nil).GetAllForTeacher), tx, currentUserID, limit, offset, sort)
}

// GetAttemptCountForTaskByUser mocks base method.
func (m *MockSubmissionRepository) GetAttemptCountForTaskByUser(tx *gorm.DB, taskID, userID int64) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttemptCountForTaskByUser", tx, taskID, userID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttemptCountForTaskByUser indicates an expected call of GetAttemptCountForTaskByUser.
func (mr *MockSubmissionRepositoryMockRecorder) GetAttemptCountForTaskByUser(tx, taskID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttemptCountForTaskByUser", reflect.TypeOf((*MockSubmissionRepository)(nil).GetAttemptCountForTaskByUser), tx, taskID, userID)
}

// GetBestScoreForTaskByUser mocks base method.
func (m *MockSubmissionRepository) GetBestScoreForTaskByUser(tx *gorm.DB, taskID, userID int64) (*float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBestScoreForTaskByUser", tx, taskID, userID)
	ret0, _ := ret[0].(*float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBestScoreForTaskByUser indicates an expected call of GetBestScoreForTaskByUser.
func (mr *MockSubmissionRepositoryMockRecorder) GetBestScoreForTaskByUser(tx, taskID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBestScoreForTaskByUser", reflect.TypeOf((*MockSubmissionRepository)(nil).GetBestScoreForTaskByUser), tx, taskID, userID)
}

// GetLatestForTaskByUser mocks base method.
func (m *MockSubmissionRepository) GetLatestForTaskByUser(tx *gorm.DB, taskID, userID int64) (*models.Submission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestForTaskByUser", tx, taskID, userID)
	ret0, _ := ret[0].(*models.Submission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestForTaskByUser indicates an expected call of GetLatestForTaskByUser.
func (mr *MockSubmissionRepositoryMockRecorder) GetLatestForTaskByUser(tx, taskID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestForTaskByUser", reflect.TypeOf((*MockSubmissionRepository)(nil).GetLatestForTaskByUser), tx, taskID, userID)
}

// MarkEvaluated mocks base method.
func (m *MockSubmissionRepository) MarkEvaluated(tx *gorm.DB, submissionID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkEvaluated", tx, submissionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkEvaluated indicates an expected call of MarkEvaluated.
func (mr *MockSubmissionRepositoryMockRecorder) MarkEvaluated(tx, submissionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkEvaluated", reflect.TypeOf((*MockSubmissionRepository)(nil).MarkEvaluated), tx, submissionID)
}

// MarkFailed mocks base method.
func (m *MockSubmissionRepository) MarkFailed(db *gorm.DB, submissionID int64, errorMsg string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkFailed", db, submissionID, errorMsg)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkFailed indicates an expected call of MarkFailed.
func (mr *MockSubmissionRepositoryMockRecorder) MarkFailed(db, submissionID, errorMsg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkFailed", reflect.TypeOf((*MockSubmissionRepository)(nil).MarkFailed), db, submissionID, errorMsg)
}

// MarkProcessing mocks base method.
func (m *MockSubmissionRepository) MarkProcessing(tx *gorm.DB, submissionID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkProcessing", tx, submissionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkProcessing indicates an expected call of MarkProcessing.
func (mr *MockSubmissionRepositoryMockRecorder) MarkProcessing(tx, submissionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkProcessing", reflect.TypeOf((*MockSubmissionRepository)(nil).MarkProcessing), tx, submissionID)
}

// MockSubmissionResultRepository is a mock of SubmissionResultRepository interface.
type MockSubmissionResultRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSubmissionResultRepositoryMockRecorder
	isgomock struct{}
}

// MockSubmissionResultRepositoryMockRecorder is the mock recorder for MockSubmissionResultRepository.
type MockSubmissionResultRepositoryMockRecorder struct {
	mock *MockSubmissionResultRepository
}

// NewMockSubmissionResultRepository creates a new mock instance.
func NewMockSubmissionResultRepository(ctrl *gomock.Controller) *MockSubmissionResultRepository {
	mock := &MockSubmissionResultRepository{ctrl: ctrl}
	mock.recorder = &MockSubmissionResultRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubmissionResultRepository) EXPECT() *MockSubmissionResultRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSubmissionResultRepository) Create(tx *gorm.DB, solutionResult models.SubmissionResult) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", tx, solutionResult)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSubmissionResultRepositoryMockRecorder) Create(tx, solutionResult any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSubmissionResultRepository)(nil).Create), tx, solutionResult)
}

// Get mocks base method.
func (m *MockSubmissionResultRepository) Get(tx *gorm.DB, submissionResultID int64) (*models.SubmissionResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", tx, submissionResultID)
	ret0, _ := ret[0].(*models.SubmissionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSubmissionResultRepositoryMockRecorder) Get(tx, submissionResultID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSubmissionResultRepository)(nil).Get), tx, submissionResultID)
}

// GetBySubmission mocks base method.
func (m *MockSubmissionResultRepository) GetBySubmission(tx *gorm.DB, submissionID int64) (*models.SubmissionResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySubmission", tx, submissionID)
	ret0, _ := ret[0].(*models.SubmissionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySubmission indicates an expected call of GetBySubmission.
func (mr *MockSubmissionResultRepositoryMockRecorder) GetBySubmission(tx, submissionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySubmission", reflect.TypeOf((*MockSubmissionResultRepository)(nil).GetBySubmission), tx, submissionID)
}

// Put mocks base method.
func (m *MockSubmissionResultRepository) Put(tx *gorm.DB, submissionResult *models.SubmissionResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", tx, submissionResult)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockSubmissionResultRepositoryMockRecorder) Put(tx, submissionResult any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockSubmissionResultRepository)(nil).Put), tx, submissionResult)
}

// MockLanguageRepository is a mock of LanguageRepository interface.
type MockLanguageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLanguageRepositoryMockRecorder
	isgomock struct{}
}

// MockLanguageRepositoryMockRecorder is the mock recorder for MockLanguageRepository.
type MockLanguageRepositoryMockRecorder struct {
	mock *MockLanguageRepository
}

// NewMockLanguageRepository creates a new mock instance.
func NewMockLanguageRepository(ctrl *gomock.Controller) *MockLanguageRepository {
	mock := &MockLanguageRepository{ctrl: ctrl}
	mock.recorder = &MockLanguageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLanguageRepository) EXPECT() *MockLanguageRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockLanguageRepository) Create(tx *gorm.DB, language *models.LanguageConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", tx, language)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockLanguageRepositoryMockRecorder) Create(tx, language any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockLanguageRepository)(nil).Create), tx, language)
}

// Delete mocks base method.
func (m *MockLanguageRepository) Delete(tx *gorm.DB, languageID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", tx, languageID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockLanguageRepositoryMockRecorder) Delete(tx, languageID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockLanguageRepository)(nil).Delete), tx, languageID)
}

// GetAll mocks base method.
func (m *MockLanguageRepository) GetAll(tx *gorm.DB) ([]models.LanguageConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", tx)
	ret0, _ := ret[0].([]models.LanguageConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockLanguageRepositoryMockRecorder) GetAll(tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockLanguageRepository)(nil).GetAll), tx)
}

// GetEnabled mocks base method.
func (m *MockLanguageRepository) GetEnabled(tx *gorm.DB) ([]models.LanguageConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnabled", tx)
	ret0, _ := ret[0].([]models.LanguageConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnabled indicates an expected call of GetEnabled.
func (mr *MockLanguageRepositoryMockRecorder) GetEnabled(tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnabled", reflect.TypeOf((*MockLanguageRepository)(nil).GetEnabled), tx)
}

// MarkDisabled mocks base method.
func (m *MockLanguageRepository) MarkDisabled(tx *gorm.DB, languageID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkDisabled", tx, languageID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkDisabled indicates an expected call of MarkDisabled.
func (mr *MockLanguageRepositoryMockRecorder) MarkDisabled(tx, languageID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkDisabled", reflect.TypeOf((*MockLanguageRepository)(nil).MarkDisabled), tx, languageID)
}

// MarkEnabled mocks base method.
func (m *MockLanguageRepository) MarkEnabled(tx *gorm.DB, languageID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkEnabled", tx, languageID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkEnabled indicates an expected call of MarkEnabled.
func (mr *MockLanguageRepositoryMockRecorder) MarkEnabled(tx, languageID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkEnabled", reflect.TypeOf((*MockLanguageRepository)(nil).MarkEnabled), tx, languageID)
}

// MockTestCaseRepository is a mock of TestCaseRepository interface.
type MockTestCaseRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTestCaseRepositoryMockRecorder
	isgomock struct{}
}

// MockTestCaseRepositoryMockRecorder is the mock recorder for MockTestCaseRepository.
type MockTestCaseRepositoryMockRecorder struct {
	mock *MockTestCaseRepository
}

// NewMockTestCaseRepository creates a new mock instance.
func NewMockTestCaseRepository(ctrl *gomock.Controller) *MockTestCaseRepository {
	mock := &MockTestCaseRepository{ctrl: ctrl}
	mock.recorder = &MockTestCaseRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestCaseRepository) EXPECT() *MockTestCaseRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTestCaseRepository) Create(tx *gorm.DB, testCase *models.TestCase) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", tx, testCase)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTestCaseRepositoryMockRecorder) Create(tx, testCase any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTestCaseRepository)(nil).Create), tx, testCase)
}

// DeleteAll mocks base method.
func (m *MockTestCaseRepository) DeleteAll(tx *gorm.DB, taskID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", tx, taskID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockTestCaseRepositoryMockRecorder) DeleteAll(tx, taskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockTestCaseRepository)(nil).DeleteAll), tx, taskID)
}

// Get mocks base method.
func (m *MockTestCaseRepository) Get(tx *gorm.DB, ioID int64) (*models.TestCase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", tx, ioID)
	ret0, _ := ret[0].(*models.TestCase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTestCaseRepositoryMockRecorder) Get(tx, ioID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTestCaseRepository)(nil).Get), tx, ioID)
}

// GetByTask mocks base method.
func (m *MockTestCaseRepository) GetByTask(db *gorm.DB, taskID int64) ([]models.TestCase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTask", db, taskID)
	ret0, _ := ret[0].([]models.TestCase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTask indicates an expected call of GetByTask.
func (mr *MockTestCaseRepositoryMockRecorder) GetByTask(db, taskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTask", reflect.TypeOf((*MockTestCaseRepository)(nil).GetByTask), db, taskID)
}

// GetTestCaseID mocks base method.
func (m *MockTestCaseRepository) GetTestCaseID(db *gorm.DB, taskID int64, order int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTestCaseID", db, taskID, order)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTestCaseID indicates an expected call of GetTestCaseID.
func (mr *MockTestCaseRepositoryMockRecorder) GetTestCaseID(db, taskID, order any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTestCaseID", reflect.TypeOf((*MockTestCaseRepository)(nil).GetTestCaseID), db, taskID, order)
}

// Put mocks base method.
func (m *MockTestCaseRepository) Put(tx *gorm.DB, testCase *models.TestCase) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", tx, testCase)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockTestCaseRepositoryMockRecorder) Put(tx, testCase any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockTestCaseRepository)(nil).Put), tx, testCase)
}

// MockQueueMessageRepository is a mock of QueueMessageRepository interface.
type MockQueueMessageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockQueueMessageRepositoryMockRecorder
	isgomock struct{}
}

// MockQueueMessageRepositoryMockRecorder is the mock recorder for MockQueueMessageRepository.
type MockQueueMessageRepositoryMockRecorder struct {
	mock *MockQueueMessageRepository
}

// NewMockQueueMessageRepository creates a new mock instance.
func NewMockQueueMessageRepository(ctrl *gomock.Controller) *MockQueueMessageRepository {
	mock := &MockQueueMessageRepository{ctrl: ctrl}
	mock.recorder = &MockQueueMessageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueueMessageRepository) EXPECT() *MockQueueMessageRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockQueueMessageRepository) Create(tx *gorm.DB, queueMessage *models.QueueMessage) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", tx, queueMessage)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockQueueMessageRepositoryMockRecorder) Create(tx, queueMessage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockQueueMessageRepository)(nil).Create), tx, queueMessage)
}

// Delete mocks base method.
func (m *MockQueueMessageRepository) Delete(tx *gorm.DB, messageID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", tx, messageID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockQueueMessageRepositoryMockRecorder) Delete(tx, messageID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockQueueMessageRepository)(nil).Delete), tx, messageID)
}

// Get mocks base method.
func (m *MockQueueMessageRepository) Get(tx *gorm.DB, messageID string) (*models.QueueMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", tx, messageID)
	ret0, _ := ret[0].(*models.QueueMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockQueueMessageRepositoryMockRecorder) Get(tx, messageID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockQueueMessageRepository)(nil).Get), tx, messageID)
}

// MockTestRepository is a mock of TestRepository interface.
type MockTestRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTestRepositoryMockRecorder
	isgomock struct{}
}

// MockTestRepositoryMockRecorder is the mock recorder for MockTestRepository.
type MockTestRepositoryMockRecorder struct {
	mock *MockTestRepository
}

// NewMockTestRepository creates a new mock instance.
func NewMockTestRepository(ctrl *gomock.Controller) *MockTestRepository {
	mock := &MockTestRepository{ctrl: ctrl}
	mock.recorder = &MockTestRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestRepository) EXPECT() *MockTestRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTestRepository) Create(tx *gorm.DB, testResult *models.TestResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", tx, testResult)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTestRepositoryMockRecorder) Create(tx, testResult any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTestRepository)(nil).Create), tx, testResult)
}

// GetBySubmissionAndOrder mocks base method.
func (m *MockTestRepository) GetBySubmissionAndOrder(tx *gorm.DB, submissionID int64, order int) (*models.TestResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySubmissionAndOrder", tx, submissionID, order)
	ret0, _ := ret[0].(*models.TestResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySubmissionAndOrder indicates an expected call of GetBySubmissionAndOrder.
func (mr *MockTestRepositoryMockRecorder) GetBySubmissionAndOrder(tx, submissionID, order any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySubmissionAndOrder", reflect.TypeOf((*MockTestRepository)(nil).GetBySubmissionAndOrder), tx, submissionID, order)
}

// Put mocks base method.
func (m *MockTestRepository) Put(tx *gorm.DB, testResult *models.TestResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", tx, testResult)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockTestRepositoryMockRecorder) Put(tx, testResult any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockTestRepository)(nil).Put), tx, testResult)
}

// MockFile is a mock of File interface.
type MockFile struct {
	ctrl     *gomock.Controller
	recorder *MockFileMockRecorder
	isgomock struct{}
}

// MockFileMockRecorder is the mock recorder for MockFile.
type MockFileMockRecorder struct {
	mock *MockFile
}

// NewMockFile creates a new mock instance.
func NewMockFile(ctrl *gomock.Controller) *MockFile {
	mock := &MockFile{ctrl: ctrl}
	mock.recorder = &MockFileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFile) EXPECT() *MockFileMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockFile) Create(tx *gorm.DB, file *models.File) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", tx, file)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockFileMockRecorder) Create(tx, file any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFile)(nil).Create), tx, file)
}
