// Code generated by MockGen. DO NOT EDIT.
// Source: ./package/service (interfaces: ContestService,UserService,TaskService,AuthService,GroupService,SubmissionService,LanguageService,JWTService,QueueService,WorkerService)
//
// Generated by this command:
//
//	mockgen -destination package/service/mocks/mockgen.go ./package/service ContestService,UserService,TaskService,AuthService,GroupService,SubmissionService,LanguageService,JWTService,QueueService,WorkerService
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"
	sync "sync"

	schemas "github.com/mini-maxit/backend/package/domain/schemas"
	types "github.com/mini-maxit/backend/package/domain/types"
	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockContestService is a mock of ContestService interface.
type MockContestService struct {
	ctrl     *gomock.Controller
	recorder *MockContestServiceMockRecorder
	isgomock struct{}
}

// MockContestServiceMockRecorder is the mock recorder for MockContestService.
type MockContestServiceMockRecorder struct {
	mock *MockContestService
}

// NewMockContestService creates a new mock instance.
func NewMockContestService(ctrl *gomock.Controller) *MockContestService {
	mock := &MockContestService{ctrl: ctrl}
	mock.recorder = &MockContestServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContestService) EXPECT() *MockContestServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockContestService) Create(tx *gorm.DB, currentUser schemas.User, contest *schemas.CreateContest) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", tx, currentUser, contest)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockContestServiceMockRecorder) Create(tx, currentUser, contest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockContestService)(nil).Create), tx, currentUser, contest)
}

// Delete mocks base method.
func (m *MockContestService) Delete(tx *gorm.DB, currentUser schemas.User, contestID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", tx, currentUser, contestID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockContestServiceMockRecorder) Delete(tx, currentUser, contestID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockContestService)(nil).Delete), tx, currentUser, contestID)
}

// Edit mocks base method.
func (m *MockContestService) Edit(tx *gorm.DB, currentUser schemas.User, contestID int64, editInfo *schemas.EditContest) (*schemas.Contest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", tx, currentUser, contestID, editInfo)
	ret0, _ := ret[0].(*schemas.Contest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Edit indicates an expected call of Edit.
func (mr *MockContestServiceMockRecorder) Edit(tx, currentUser, contestID, editInfo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockContestService)(nil).Edit), tx, currentUser, contestID, editInfo)
}

// Get mocks base method.
func (m *MockContestService) Get(tx *gorm.DB, currentUser schemas.User, contestID int64) (*schemas.Contest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", tx, currentUser, contestID)
	ret0, _ := ret[0].(*schemas.Contest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockContestServiceMockRecorder) Get(tx, currentUser, contestID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockContestService)(nil).Get), tx, currentUser, contestID)
}

// GetOngoingContests mocks base method.
func (m *MockContestService) GetOngoingContests(tx *gorm.DB, currentUser schemas.User, queryParams map[string]any) ([]schemas.AvailableContest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOngoingContests", tx, currentUser, queryParams)
	ret0, _ := ret[0].([]schemas.AvailableContest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOngoingContests indicates an expected call of GetOngoingContests.
func (mr *MockContestServiceMockRecorder) GetOngoingContests(tx, currentUser, queryParams any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOngoingContests", reflect.TypeOf((*MockContestService)(nil).GetOngoingContests), tx, currentUser, queryParams)
}

// GetPastContests mocks base method.
func (m *MockContestService) GetPastContests(tx *gorm.DB, currentUser schemas.User, queryParams map[string]any) ([]schemas.AvailableContest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPastContests", tx, currentUser, queryParams)
	ret0, _ := ret[0].([]schemas.AvailableContest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPastContests indicates an expected call of GetPastContests.
func (mr *MockContestServiceMockRecorder) GetPastContests(tx, currentUser, queryParams any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPastContests", reflect.TypeOf((*MockContestService)(nil).GetPastContests), tx, currentUser, queryParams)
}

// GetTasksForContest mocks base method.
func (m *MockContestService) GetTasksForContest(tx *gorm.DB, currentUser schemas.User, contestID int64) ([]schemas.TaskWithContestStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTasksForContest", tx, currentUser, contestID)
	ret0, _ := ret[0].([]schemas.TaskWithContestStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTasksForContest indicates an expected call of GetTasksForContest.
func (mr *MockContestServiceMockRecorder) GetTasksForContest(tx, currentUser, contestID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTasksForContest", reflect.TypeOf((*MockContestService)(nil).GetTasksForContest), tx, currentUser, contestID)
}

// GetUpcomingContests mocks base method.
func (m *MockContestService) GetUpcomingContests(tx *gorm.DB, currentUser schemas.User, queryParams map[string]any) ([]schemas.AvailableContest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpcomingContests", tx, currentUser, queryParams)
	ret0, _ := ret[0].([]schemas.AvailableContest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUpcomingContests indicates an expected call of GetUpcomingContests.
func (mr *MockContestServiceMockRecorder) GetUpcomingContests(tx, currentUser, queryParams any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpcomingContests", reflect.TypeOf((*MockContestService)(nil).GetUpcomingContests), tx, currentUser, queryParams)
}

// GetUserContests mocks base method.
func (m *MockContestService) GetUserContests(tx *gorm.DB, userID int64) (schemas.UserContestsWithStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserContests", tx, userID)
	ret0, _ := ret[0].(schemas.UserContestsWithStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserContests indicates an expected call of GetUserContests.
func (mr *MockContestServiceMockRecorder) GetUserContests(tx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserContests", reflect.TypeOf((*MockContestService)(nil).GetUserContests), tx, userID)
}

// RegisterForContest mocks base method.
func (m *MockContestService) RegisterForContest(tx *gorm.DB, currentUser schemas.User, contestID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterForContest", tx, currentUser, contestID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterForContest indicates an expected call of RegisterForContest.
func (mr *MockContestServiceMockRecorder) RegisterForContest(tx, currentUser, contestID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterForContest", reflect.TypeOf((*MockContestService)(nil).RegisterForContest), tx, currentUser, contestID)
}

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
	isgomock struct{}
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// ChangePassword mocks base method.
func (m *MockUserService) ChangePassword(tx *gorm.DB, currentUser schemas.User, userID int64, data *schemas.UserChangePassword) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePassword", tx, currentUser, userID, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangePassword indicates an expected call of ChangePassword.
func (mr *MockUserServiceMockRecorder) ChangePassword(tx, currentUser, userID, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockUserService)(nil).ChangePassword), tx, currentUser, userID, data)
}

// ChangeRole mocks base method.
func (m *MockUserService) ChangeRole(tx *gorm.DB, currentUser schemas.User, userID int64, role types.UserRole) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeRole", tx, currentUser, userID, role)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeRole indicates an expected call of ChangeRole.
func (mr *MockUserServiceMockRecorder) ChangeRole(tx, currentUser, userID, role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeRole", reflect.TypeOf((*MockUserService)(nil).ChangeRole), tx, currentUser, userID, role)
}

// Edit mocks base method.
func (m *MockUserService) Edit(tx *gorm.DB, currentUser schemas.User, userID int64, updateInfo *schemas.UserEdit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", tx, currentUser, userID, updateInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Edit indicates an expected call of Edit.
func (mr *MockUserServiceMockRecorder) Edit(tx, currentUser, userID, updateInfo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockUserService)(nil).Edit), tx, currentUser, userID, updateInfo)
}

// Get mocks base method.
func (m *MockUserService) Get(tx *gorm.DB, userID int64) (*schemas.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", tx, userID)
	ret0, _ := ret[0].(*schemas.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUserServiceMockRecorder) Get(tx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUserService)(nil).Get), tx, userID)
}

// GetAll mocks base method.
func (m *MockUserService) GetAll(tx *gorm.DB, queryParams map[string]any) ([]schemas.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", tx, queryParams)
	ret0, _ := ret[0].([]schemas.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockUserServiceMockRecorder) GetAll(tx, queryParams any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockUserService)(nil).GetAll), tx, queryParams)
}

// GetByEmail mocks base method.
func (m *MockUserService) GetByEmail(tx *gorm.DB, email string) (*schemas.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", tx, email)
	ret0, _ := ret[0].(*schemas.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockUserServiceMockRecorder) GetByEmail(tx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockUserService)(nil).GetByEmail), tx, email)
}

// MockTaskService is a mock of TaskService interface.
type MockTaskService struct {
	ctrl     *gomock.Controller
	recorder *MockTaskServiceMockRecorder
	isgomock struct{}
}

// MockTaskServiceMockRecorder is the mock recorder for MockTaskService.
type MockTaskServiceMockRecorder struct {
	mock *MockTaskService
}

// NewMockTaskService creates a new mock instance.
func NewMockTaskService(ctrl *gomock.Controller) *MockTaskService {
	mock := &MockTaskService{ctrl: ctrl}
	mock.recorder = &MockTaskServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskService) EXPECT() *MockTaskServiceMockRecorder {
	return m.recorder
}

// AssignToGroups mocks base method.
func (m *MockTaskService) AssignToGroups(tx *gorm.DB, currentUser schemas.User, taskID int64, groupIDs []int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignToGroups", tx, currentUser, taskID, groupIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignToGroups indicates an expected call of AssignToGroups.
func (mr *MockTaskServiceMockRecorder) AssignToGroups(tx, currentUser, taskID, groupIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignToGroups", reflect.TypeOf((*MockTaskService)(nil).AssignToGroups), tx, currentUser, taskID, groupIDs)
}

// AssignToUsers mocks base method.
func (m *MockTaskService) AssignToUsers(tx *gorm.DB, currentUser schemas.User, taskID int64, userIDs []int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignToUsers", tx, currentUser, taskID, userIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignToUsers indicates an expected call of AssignToUsers.
func (mr *MockTaskServiceMockRecorder) AssignToUsers(tx, currentUser, taskID, userIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignToUsers", reflect.TypeOf((*MockTaskService)(nil).AssignToUsers), tx, currentUser, taskID, userIDs)
}

// Create mocks base method.
func (m *MockTaskService) Create(tx *gorm.DB, currentUser schemas.User, task *schemas.Task) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", tx, currentUser, task)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTaskServiceMockRecorder) Create(tx, currentUser, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTaskService)(nil).Create), tx, currentUser, task)
}

// CreateInputOutput mocks base method.
func (m *MockTaskService) CreateInputOutput(tx *gorm.DB, taskID int64, archivePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInputOutput", tx, taskID, archivePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateInputOutput indicates an expected call of CreateInputOutput.
func (mr *MockTaskServiceMockRecorder) CreateInputOutput(tx, taskID, archivePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInputOutput", reflect.TypeOf((*MockTaskService)(nil).CreateInputOutput), tx, taskID, archivePath)
}

// Delete mocks base method.
func (m *MockTaskService) Delete(tx *gorm.DB, currentUser schemas.User, taskID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", tx, currentUser, taskID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTaskServiceMockRecorder) Delete(tx, currentUser, taskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTaskService)(nil).Delete), tx, currentUser, taskID)
}

// Edit mocks base method.
func (m *MockTaskService) Edit(tx *gorm.DB, currentUser schemas.User, taskID int64, updateInfo *schemas.EditTask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", tx, currentUser, taskID, updateInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Edit indicates an expected call of Edit.
func (mr *MockTaskServiceMockRecorder) Edit(tx, currentUser, taskID, updateInfo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockTaskService)(nil).Edit), tx, currentUser, taskID, updateInfo)
}

// Get mocks base method.
func (m *MockTaskService) Get(tx *gorm.DB, currentUser schemas.User, taskID int64) (*schemas.TaskDetailed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", tx, currentUser, taskID)
	ret0, _ := ret[0].(*schemas.TaskDetailed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTaskServiceMockRecorder) Get(tx, currentUser, taskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTaskService)(nil).Get), tx, currentUser, taskID)
}

// GetAll mocks base method.
func (m *MockTaskService) GetAll(tx *gorm.DB, currentUser schemas.User, queryParams map[string]any) ([]schemas.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", tx, currentUser, queryParams)
	ret0, _ := ret[0].([]schemas.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockTaskServiceMockRecorder) GetAll(tx, currentUser, queryParams any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockTaskService)(nil).GetAll), tx, currentUser, queryParams)
}

// GetAllAssigned mocks base method.
func (m *MockTaskService) GetAllAssigned(tx *gorm.DB, currentUser schemas.User, queryParams map[string]any) ([]schemas.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAssigned", tx, currentUser, queryParams)
	ret0, _ := ret[0].([]schemas.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAssigned indicates an expected call of GetAllAssigned.
func (mr *MockTaskServiceMockRecorder) GetAllAssigned(tx, currentUser, queryParams any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAssigned", reflect.TypeOf((*MockTaskService)(nil).GetAllAssigned), tx, currentUser, queryParams)
}

// GetAllCreated mocks base method.
func (m *MockTaskService) GetAllCreated(tx *gorm.DB, currentUser schemas.User, queryParams map[string]any) ([]schemas.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCreated", tx, currentUser, queryParams)
	ret0, _ := ret[0].([]schemas.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCreated indicates an expected call of GetAllCreated.
func (mr *MockTaskServiceMockRecorder) GetAllCreated(tx, currentUser, queryParams any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCreated", reflect.TypeOf((*MockTaskService)(nil).GetAllCreated), tx, currentUser, queryParams)
}

// GetAllForGroup mocks base method.
func (m *MockTaskService) GetAllForGroup(tx *gorm.DB, currentUser schemas.User, groupID int64, queryParams map[string]any) ([]schemas.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllForGroup", tx, currentUser, groupID, queryParams)
	ret0, _ := ret[0].([]schemas.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllForGroup indicates an expected call of GetAllForGroup.
func (mr *MockTaskServiceMockRecorder) GetAllForGroup(tx, currentUser, groupID, queryParams any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllForGroup", reflect.TypeOf((*MockTaskService)(nil).GetAllForGroup), tx, currentUser, groupID, queryParams)
}

// GetByTitle mocks base method.
func (m *MockTaskService) GetByTitle(tx *gorm.DB, title string) (*schemas.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTitle", tx, title)
	ret0, _ := ret[0].(*schemas.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTitle indicates an expected call of GetByTitle.
func (mr *MockTaskServiceMockRecorder) GetByTitle(tx, title any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTitle", reflect.TypeOf((*MockTaskService)(nil).GetByTitle), tx, title)
}

// GetLimits mocks base method.
func (m *MockTaskService) GetLimits(tx *gorm.DB, currentUser schemas.User, taskID int64) ([]schemas.InputOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLimits", tx, currentUser, taskID)
	ret0, _ := ret[0].([]schemas.InputOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLimits indicates an expected call of GetLimits.
func (mr *MockTaskServiceMockRecorder) GetLimits(tx, currentUser, taskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLimits", reflect.TypeOf((*MockTaskService)(nil).GetLimits), tx, currentUser, taskID)
}

// ParseInputOutput mocks base method.
func (m *MockTaskService) ParseInputOutput(archivePath string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseInputOutput", archivePath)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseInputOutput indicates an expected call of ParseInputOutput.
func (mr *MockTaskServiceMockRecorder) ParseInputOutput(archivePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseInputOutput", reflect.TypeOf((*MockTaskService)(nil).ParseInputOutput), archivePath)
}

// ProcessAndUpload mocks base method.
func (m *MockTaskService) ProcessAndUpload(tx *gorm.DB, currentUser schemas.User, taskID int64, archivePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessAndUpload", tx, currentUser, taskID, archivePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessAndUpload indicates an expected call of ProcessAndUpload.
func (mr *MockTaskServiceMockRecorder) ProcessAndUpload(tx, currentUser, taskID, archivePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessAndUpload", reflect.TypeOf((*MockTaskService)(nil).ProcessAndUpload), tx, currentUser, taskID, archivePath)
}

// PutLimits mocks base method.
func (m *MockTaskService) PutLimits(tx *gorm.DB, currentUser schemas.User, taskID int64, limits schemas.PutInputOutputRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutLimits", tx, currentUser, taskID, limits)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutLimits indicates an expected call of PutLimits.
func (mr *MockTaskServiceMockRecorder) PutLimits(tx, currentUser, taskID, limits any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutLimits", reflect.TypeOf((*MockTaskService)(nil).PutLimits), tx, currentUser, taskID, limits)
}

// UnassignFromGroups mocks base method.
func (m *MockTaskService) UnassignFromGroups(tx *gorm.DB, currentUser schemas.User, taskID int64, groupIDs []int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnassignFromGroups", tx, currentUser, taskID, groupIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnassignFromGroups indicates an expected call of UnassignFromGroups.
func (mr *MockTaskServiceMockRecorder) UnassignFromGroups(tx, currentUser, taskID, groupIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnassignFromGroups", reflect.TypeOf((*MockTaskService)(nil).UnassignFromGroups), tx, currentUser, taskID, groupIDs)
}

// UnassignFromUsers mocks base method.
func (m *MockTaskService) UnassignFromUsers(tx *gorm.DB, currentUser schemas.User, taskID int64, userID []int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnassignFromUsers", tx, currentUser, taskID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnassignFromUsers indicates an expected call of UnassignFromUsers.
func (mr *MockTaskServiceMockRecorder) UnassignFromUsers(tx, currentUser, taskID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnassignFromUsers", reflect.TypeOf((*MockTaskService)(nil).UnassignFromUsers), tx, currentUser, taskID, userID)
}

// MockAuthService is a mock of AuthService interface.
type MockAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceMockRecorder
	isgomock struct{}
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService.
type MockAuthServiceMockRecorder struct {
	mock *MockAuthService
}

// NewMockAuthService creates a new mock instance.
func NewMockAuthService(ctrl *gomock.Controller) *MockAuthService {
	mock := &MockAuthService{ctrl: ctrl}
	mock.recorder = &MockAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService) EXPECT() *MockAuthServiceMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockAuthService) Login(tx *gorm.DB, userLogin schemas.UserLoginRequest) (*schemas.JWTTokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", tx, userLogin)
	ret0, _ := ret[0].(*schemas.JWTTokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockAuthServiceMockRecorder) Login(tx, userLogin any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthService)(nil).Login), tx, userLogin)
}

// RefreshTokens mocks base method.
func (m *MockAuthService) RefreshTokens(tx *gorm.DB, refreshRequest schemas.RefreshTokenRequest) (*schemas.JWTTokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshTokens", tx, refreshRequest)
	ret0, _ := ret[0].(*schemas.JWTTokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshTokens indicates an expected call of RefreshTokens.
func (mr *MockAuthServiceMockRecorder) RefreshTokens(tx, refreshRequest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshTokens", reflect.TypeOf((*MockAuthService)(nil).RefreshTokens), tx, refreshRequest)
}

// Register mocks base method.
func (m *MockAuthService) Register(tx *gorm.DB, userRegister schemas.UserRegisterRequest) (*schemas.JWTTokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", tx, userRegister)
	ret0, _ := ret[0].(*schemas.JWTTokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockAuthServiceMockRecorder) Register(tx, userRegister any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockAuthService)(nil).Register), tx, userRegister)
}

// MockGroupService is a mock of GroupService interface.
type MockGroupService struct {
	ctrl     *gomock.Controller
	recorder *MockGroupServiceMockRecorder
	isgomock struct{}
}

// MockGroupServiceMockRecorder is the mock recorder for MockGroupService.
type MockGroupServiceMockRecorder struct {
	mock *MockGroupService
}

// NewMockGroupService creates a new mock instance.
func NewMockGroupService(ctrl *gomock.Controller) *MockGroupService {
	mock := &MockGroupService{ctrl: ctrl}
	mock.recorder = &MockGroupServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupService) EXPECT() *MockGroupServiceMockRecorder {
	return m.recorder
}

// AddUsers mocks base method.
func (m *MockGroupService) AddUsers(tx *gorm.DB, currentUser schemas.User, groupID int64, userIDs []int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUsers", tx, currentUser, groupID, userIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUsers indicates an expected call of AddUsers.
func (mr *MockGroupServiceMockRecorder) AddUsers(tx, currentUser, groupID, userIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUsers", reflect.TypeOf((*MockGroupService)(nil).AddUsers), tx, currentUser, groupID, userIDs)
}

// Create mocks base method.
func (m *MockGroupService) Create(tx *gorm.DB, currentUser schemas.User, group *schemas.Group) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", tx, currentUser, group)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockGroupServiceMockRecorder) Create(tx, currentUser, group any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockGroupService)(nil).Create), tx, currentUser, group)
}

// Delete mocks base method.
func (m *MockGroupService) Delete(tx *gorm.DB, currentUser schemas.User, groupID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", tx, currentUser, groupID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockGroupServiceMockRecorder) Delete(tx, currentUser, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockGroupService)(nil).Delete), tx, currentUser, groupID)
}

// DeleteUsers mocks base method.
func (m *MockGroupService) DeleteUsers(tx *gorm.DB, currentUser schemas.User, groupID int64, userIDs []int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUsers", tx, currentUser, groupID, userIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUsers indicates an expected call of DeleteUsers.
func (mr *MockGroupServiceMockRecorder) DeleteUsers(tx, currentUser, groupID, userIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUsers", reflect.TypeOf((*MockGroupService)(nil).DeleteUsers), tx, currentUser, groupID, userIDs)
}

// Edit mocks base method.
func (m *MockGroupService) Edit(tx *gorm.DB, currentUser schemas.User, groupID int64, editInfo *schemas.EditGroup) (*schemas.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", tx, currentUser, groupID, editInfo)
	ret0, _ := ret[0].(*schemas.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Edit indicates an expected call of Edit.
func (mr *MockGroupServiceMockRecorder) Edit(tx, currentUser, groupID, editInfo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockGroupService)(nil).Edit), tx, currentUser, groupID, editInfo)
}

// Get mocks base method.
func (m *MockGroupService) Get(tx *gorm.DB, currentUser schemas.User, groupID int64) (*schemas.GroupDetailed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", tx, currentUser, groupID)
	ret0, _ := ret[0].(*schemas.GroupDetailed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockGroupServiceMockRecorder) Get(tx, currentUser, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockGroupService)(nil).Get), tx, currentUser, groupID)
}

// GetAll mocks base method.
func (m *MockGroupService) GetAll(tx *gorm.DB, currentUser schemas.User, queryParams map[string]any) ([]schemas.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", tx, currentUser, queryParams)
	ret0, _ := ret[0].([]schemas.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockGroupServiceMockRecorder) GetAll(tx, currentUser, queryParams any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockGroupService)(nil).GetAll), tx, currentUser, queryParams)
}

// GetTasks mocks base method.
func (m *MockGroupService) GetTasks(tx *gorm.DB, currentUser schemas.User, groupID int64) ([]schemas.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTasks", tx, currentUser, groupID)
	ret0, _ := ret[0].([]schemas.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTasks indicates an expected call of GetTasks.
func (mr *MockGroupServiceMockRecorder) GetTasks(tx, currentUser, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTasks", reflect.TypeOf((*MockGroupService)(nil).GetTasks), tx, currentUser, groupID)
}

// GetUsers mocks base method.
func (m *MockGroupService) GetUsers(tx *gorm.DB, currentUser schemas.User, groupID int64) ([]schemas.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", tx, currentUser, groupID)
	ret0, _ := ret[0].([]schemas.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockGroupServiceMockRecorder) GetUsers(tx, currentUser, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockGroupService)(nil).GetUsers), tx, currentUser, groupID)
}

// MockSubmissionService is a mock of SubmissionService interface.
type MockSubmissionService struct {
	ctrl     *gomock.Controller
	recorder *MockSubmissionServiceMockRecorder
	isgomock struct{}
}

// MockSubmissionServiceMockRecorder is the mock recorder for MockSubmissionService.
type MockSubmissionServiceMockRecorder struct {
	mock *MockSubmissionService
}

// NewMockSubmissionService creates a new mock instance.
func NewMockSubmissionService(ctrl *gomock.Controller) *MockSubmissionService {
	mock := &MockSubmissionService{ctrl: ctrl}
	mock.recorder = &MockSubmissionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubmissionService) EXPECT() *MockSubmissionServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSubmissionService) Create(tx *gorm.DB, taskID, userID, languageID int64, order int, fileID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", tx, taskID, userID, languageID, order, fileID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSubmissionServiceMockRecorder) Create(tx, taskID, userID, languageID, order, fileID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSubmissionService)(nil).Create), tx, taskID, userID, languageID, order, fileID)
}

// CreateSubmissionResult mocks base method.
func (m *MockSubmissionService) CreateSubmissionResult(tx *gorm.DB, submissionID int64, responseMessage schemas.QueueResponseMessage) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubmissionResult", tx, submissionID, responseMessage)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubmissionResult indicates an expected call of CreateSubmissionResult.
func (mr *MockSubmissionServiceMockRecorder) CreateSubmissionResult(tx, submissionID, responseMessage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubmissionResult", reflect.TypeOf((*MockSubmissionService)(nil).CreateSubmissionResult), tx, submissionID, responseMessage)
}

// Get mocks base method.
func (m *MockSubmissionService) Get(tx *gorm.DB, submissionID int64, user schemas.User) (schemas.Submission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", tx, submissionID, user)
	ret0, _ := ret[0].(schemas.Submission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSubmissionServiceMockRecorder) Get(tx, submissionID, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSubmissionService)(nil).Get), tx, submissionID, user)
}

// GetAll mocks base method.
func (m *MockSubmissionService) GetAll(tx *gorm.DB, user schemas.User, queryParams map[string]any) ([]schemas.Submission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", tx, user, queryParams)
	ret0, _ := ret[0].([]schemas.Submission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockSubmissionServiceMockRecorder) GetAll(tx, user, queryParams any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockSubmissionService)(nil).GetAll), tx, user, queryParams)
}

// GetAllForGroup mocks base method.
func (m *MockSubmissionService) GetAllForGroup(tx *gorm.DB, groupID int64, user schemas.User, queryParams map[string]any) ([]schemas.Submission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllForGroup", tx, groupID, user, queryParams)
	ret0, _ := ret[0].([]schemas.Submission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllForGroup indicates an expected call of GetAllForGroup.
func (mr *MockSubmissionServiceMockRecorder) GetAllForGroup(tx, groupID, user, queryParams any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllForGroup", reflect.TypeOf((*MockSubmissionService)(nil).GetAllForGroup), tx, groupID, user, queryParams)
}

// GetAllForTask mocks base method.
func (m *MockSubmissionService) GetAllForTask(tx *gorm.DB, taskID int64, user schemas.User, queryParams map[string]any) ([]schemas.Submission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllForTask", tx, taskID, user, queryParams)
	ret0, _ := ret[0].([]schemas.Submission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllForTask indicates an expected call of GetAllForTask.
func (mr *MockSubmissionServiceMockRecorder) GetAllForTask(tx, taskID, user, queryParams any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllForTask", reflect.TypeOf((*MockSubmissionService)(nil).GetAllForTask), tx, taskID, user, queryParams)
}

// GetAllForUser mocks base method.
func (m *MockSubmissionService) GetAllForUser(tx *gorm.DB, userID int64, user schemas.User, queryParams map[string]any) ([]schemas.Submission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllForUser", tx, userID, user, queryParams)
	ret0, _ := ret[0].([]schemas.Submission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllForUser indicates an expected call of GetAllForUser.
func (mr *MockSubmissionServiceMockRecorder) GetAllForUser(tx, userID, user, queryParams any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllForUser", reflect.TypeOf((*MockSubmissionService)(nil).GetAllForUser), tx, userID, user, queryParams)
}

// GetAllForUserShort mocks base method.
func (m *MockSubmissionService) GetAllForUserShort(tx *gorm.DB, userID int64, user schemas.User, queryParams map[string]any) ([]schemas.SubmissionShort, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllForUserShort", tx, userID, user, queryParams)
	ret0, _ := ret[0].([]schemas.SubmissionShort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllForUserShort indicates an expected call of GetAllForUserShort.
func (mr *MockSubmissionServiceMockRecorder) GetAllForUserShort(tx, userID, user, queryParams any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllForUserShort", reflect.TypeOf((*MockSubmissionService)(nil).GetAllForUserShort), tx, userID, user, queryParams)
}

// GetAvailableLanguages mocks base method.
func (m *MockSubmissionService) GetAvailableLanguages(tx *gorm.DB) ([]schemas.LanguageConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableLanguages", tx)
	ret0, _ := ret[0].([]schemas.LanguageConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableLanguages indicates an expected call of GetAvailableLanguages.
func (mr *MockSubmissionServiceMockRecorder) GetAvailableLanguages(tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableLanguages", reflect.TypeOf((*MockSubmissionService)(nil).GetAvailableLanguages), tx)
}

// MarkComplete mocks base method.
func (m *MockSubmissionService) MarkComplete(tx *gorm.DB, submissionID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkComplete", tx, submissionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkComplete indicates an expected call of MarkComplete.
func (mr *MockSubmissionServiceMockRecorder) MarkComplete(tx, submissionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkComplete", reflect.TypeOf((*MockSubmissionService)(nil).MarkComplete), tx, submissionID)
}

// MarkFailed mocks base method.
func (m *MockSubmissionService) MarkFailed(tx *gorm.DB, submissionID int64, errorMsg string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkFailed", tx, submissionID, errorMsg)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkFailed indicates an expected call of MarkFailed.
func (mr *MockSubmissionServiceMockRecorder) MarkFailed(tx, submissionID, errorMsg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkFailed", reflect.TypeOf((*MockSubmissionService)(nil).MarkFailed), tx, submissionID, errorMsg)
}

// MarkProcessing mocks base method.
func (m *MockSubmissionService) MarkProcessing(tx *gorm.DB, submissionID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkProcessing", tx, submissionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkProcessing indicates an expected call of MarkProcessing.
func (mr *MockSubmissionServiceMockRecorder) MarkProcessing(tx, submissionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkProcessing", reflect.TypeOf((*MockSubmissionService)(nil).MarkProcessing), tx, submissionID)
}

// Submit mocks base method.
func (m *MockSubmissionService) Submit(tx *gorm.DB, user *schemas.User, taskID, languageID int64, submissionFilePath string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Submit", tx, user, taskID, languageID, submissionFilePath)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Submit indicates an expected call of Submit.
func (mr *MockSubmissionServiceMockRecorder) Submit(tx, user, taskID, languageID, submissionFilePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Submit", reflect.TypeOf((*MockSubmissionService)(nil).Submit), tx, user, taskID, languageID, submissionFilePath)
}

// MockLanguageService is a mock of LanguageService interface.
type MockLanguageService struct {
	ctrl     *gomock.Controller
	recorder *MockLanguageServiceMockRecorder
	isgomock struct{}
}

// MockLanguageServiceMockRecorder is the mock recorder for MockLanguageService.
type MockLanguageServiceMockRecorder struct {
	mock *MockLanguageService
}

// NewMockLanguageService creates a new mock instance.
func NewMockLanguageService(ctrl *gomock.Controller) *MockLanguageService {
	mock := &MockLanguageService{ctrl: ctrl}
	mock.recorder = &MockLanguageServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLanguageService) EXPECT() *MockLanguageServiceMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockLanguageService) GetAll(tx *gorm.DB) ([]schemas.LanguageConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", tx)
	ret0, _ := ret[0].([]schemas.LanguageConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockLanguageServiceMockRecorder) GetAll(tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockLanguageService)(nil).GetAll), tx)
}

// GetAllEnabled mocks base method.
func (m *MockLanguageService) GetAllEnabled(tx *gorm.DB) ([]schemas.LanguageConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllEnabled", tx)
	ret0, _ := ret[0].([]schemas.LanguageConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllEnabled indicates an expected call of GetAllEnabled.
func (mr *MockLanguageServiceMockRecorder) GetAllEnabled(tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllEnabled", reflect.TypeOf((*MockLanguageService)(nil).GetAllEnabled), tx)
}

// Init mocks base method.
func (m *MockLanguageService) Init(tx *gorm.DB, enabledLanguages schemas.HandShakeResponsePayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", tx, enabledLanguages)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockLanguageServiceMockRecorder) Init(tx, enabledLanguages any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockLanguageService)(nil).Init), tx, enabledLanguages)
}

// MockJWTService is a mock of JWTService interface.
type MockJWTService struct {
	ctrl     *gomock.Controller
	recorder *MockJWTServiceMockRecorder
	isgomock struct{}
}

// MockJWTServiceMockRecorder is the mock recorder for MockJWTService.
type MockJWTServiceMockRecorder struct {
	mock *MockJWTService
}

// NewMockJWTService creates a new mock instance.
func NewMockJWTService(ctrl *gomock.Controller) *MockJWTService {
	mock := &MockJWTService{ctrl: ctrl}
	mock.recorder = &MockJWTServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWTService) EXPECT() *MockJWTServiceMockRecorder {
	return m.recorder
}

// AuthenticateToken mocks base method.
func (m *MockJWTService) AuthenticateToken(tx *gorm.DB, tokenString string) (*schemas.ValidateTokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthenticateToken", tx, tokenString)
	ret0, _ := ret[0].(*schemas.ValidateTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthenticateToken indicates an expected call of AuthenticateToken.
func (mr *MockJWTServiceMockRecorder) AuthenticateToken(tx, tokenString any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticateToken", reflect.TypeOf((*MockJWTService)(nil).AuthenticateToken), tx, tokenString)
}

// GenerateTokens mocks base method.
func (m *MockJWTService) GenerateTokens(tx *gorm.DB, userId int64) (*schemas.JWTTokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateTokens", tx, userId)
	ret0, _ := ret[0].(*schemas.JWTTokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateTokens indicates an expected call of GenerateTokens.
func (mr *MockJWTServiceMockRecorder) GenerateTokens(tx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateTokens", reflect.TypeOf((*MockJWTService)(nil).GenerateTokens), tx, userId)
}

// RefreshTokens mocks base method.
func (m *MockJWTService) RefreshTokens(tx *gorm.DB, refreshToken string) (*schemas.JWTTokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshTokens", tx, refreshToken)
	ret0, _ := ret[0].(*schemas.JWTTokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshTokens indicates an expected call of RefreshTokens.
func (mr *MockJWTServiceMockRecorder) RefreshTokens(tx, refreshToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshTokens", reflect.TypeOf((*MockJWTService)(nil).RefreshTokens), tx, refreshToken)
}

// MockQueueService is a mock of QueueService interface.
type MockQueueService struct {
	ctrl     *gomock.Controller
	recorder *MockQueueServiceMockRecorder
	isgomock struct{}
}

// MockQueueServiceMockRecorder is the mock recorder for MockQueueService.
type MockQueueServiceMockRecorder struct {
	mock *MockQueueService
}

// NewMockQueueService creates a new mock instance.
func NewMockQueueService(ctrl *gomock.Controller) *MockQueueService {
	mock := &MockQueueService{ctrl: ctrl}
	mock.recorder = &MockQueueServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueueService) EXPECT() *MockQueueServiceMockRecorder {
	return m.recorder
}

// GetSubmissionID mocks base method.
func (m *MockQueueService) GetSubmissionID(tx *gorm.DB, messageID string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubmissionID", tx, messageID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubmissionID indicates an expected call of GetSubmissionID.
func (mr *MockQueueServiceMockRecorder) GetSubmissionID(tx, messageID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubmissionID", reflect.TypeOf((*MockQueueService)(nil).GetSubmissionID), tx, messageID)
}

// LastWorkerStatus mocks base method.
func (m *MockQueueService) LastWorkerStatus() schemas.WorkerStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastWorkerStatus")
	ret0, _ := ret[0].(schemas.WorkerStatus)
	return ret0
}

// LastWorkerStatus indicates an expected call of LastWorkerStatus.
func (mr *MockQueueServiceMockRecorder) LastWorkerStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastWorkerStatus", reflect.TypeOf((*MockQueueService)(nil).LastWorkerStatus))
}

// PublishHandshake mocks base method.
func (m *MockQueueService) PublishHandshake() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishHandshake")
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishHandshake indicates an expected call of PublishHandshake.
func (mr *MockQueueServiceMockRecorder) PublishHandshake() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishHandshake", reflect.TypeOf((*MockQueueService)(nil).PublishHandshake))
}

// PublishSubmission mocks base method.
func (m *MockQueueService) PublishSubmission(tx *gorm.DB, submissionID, submissionResultID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishSubmission", tx, submissionID, submissionResultID)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishSubmission indicates an expected call of PublishSubmission.
func (mr *MockQueueServiceMockRecorder) PublishSubmission(tx, submissionID, submissionResultID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishSubmission", reflect.TypeOf((*MockQueueService)(nil).PublishSubmission), tx, submissionID, submissionResultID)
}

// PublishWorkerStatus mocks base method.
func (m *MockQueueService) PublishWorkerStatus() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishWorkerStatus")
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishWorkerStatus indicates an expected call of PublishWorkerStatus.
func (mr *MockQueueServiceMockRecorder) PublishWorkerStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishWorkerStatus", reflect.TypeOf((*MockQueueService)(nil).PublishWorkerStatus))
}

// StatusCond mocks base method.
func (m *MockQueueService) StatusCond() *sync.Cond {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatusCond")
	ret0, _ := ret[0].(*sync.Cond)
	return ret0
}

// StatusCond indicates an expected call of StatusCond.
func (mr *MockQueueServiceMockRecorder) StatusCond() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusCond", reflect.TypeOf((*MockQueueService)(nil).StatusCond))
}

// StatusMux mocks base method.
func (m *MockQueueService) StatusMux() *sync.Mutex {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatusMux")
	ret0, _ := ret[0].(*sync.Mutex)
	return ret0
}

// StatusMux indicates an expected call of StatusMux.
func (mr *MockQueueServiceMockRecorder) StatusMux() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusMux", reflect.TypeOf((*MockQueueService)(nil).StatusMux))
}

// UpdateWorkerStatus mocks base method.
func (m *MockQueueService) UpdateWorkerStatus(statusResponse schemas.StatusResponsePayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkerStatus", statusResponse)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWorkerStatus indicates an expected call of UpdateWorkerStatus.
func (mr *MockQueueServiceMockRecorder) UpdateWorkerStatus(statusResponse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkerStatus", reflect.TypeOf((*MockQueueService)(nil).UpdateWorkerStatus), statusResponse)
}

// MockWorkerService is a mock of WorkerService interface.
type MockWorkerService struct {
	ctrl     *gomock.Controller
	recorder *MockWorkerServiceMockRecorder
	isgomock struct{}
}

// MockWorkerServiceMockRecorder is the mock recorder for MockWorkerService.
type MockWorkerServiceMockRecorder struct {
	mock *MockWorkerService
}

// NewMockWorkerService creates a new mock instance.
func NewMockWorkerService(ctrl *gomock.Controller) *MockWorkerService {
	mock := &MockWorkerService{ctrl: ctrl}
	mock.recorder = &MockWorkerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkerService) EXPECT() *MockWorkerServiceMockRecorder {
	return m.recorder
}

// GetStatus mocks base method.
func (m *MockWorkerService) GetStatus(currentUser schemas.User) (*schemas.WorkerStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus", currentUser)
	ret0, _ := ret[0].(*schemas.WorkerStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatus indicates an expected call of GetStatus.
func (mr *MockWorkerServiceMockRecorder) GetStatus(currentUser any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockWorkerService)(nil).GetStatus), currentUser)
}
