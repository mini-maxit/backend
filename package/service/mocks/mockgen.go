// Code generated by MockGen. DO NOT EDIT.
// Source: ./package/service (interfaces: LanguageService,TaskService,UserService,SessionService,AuthService)
//
// Generated by this command:
//
//	mockgen -destination package/service/mocks/mockgen.go ./package/service LanguageService,TaskService,UserService,SessionService,AuthService
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	schemas "github.com/mini-maxit/backend/package/domain/schemas"
	types "github.com/mini-maxit/backend/package/domain/types"
	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockLanguageService is a mock of LanguageService interface.
type MockLanguageService struct {
	ctrl     *gomock.Controller
	recorder *MockLanguageServiceMockRecorder
	isgomock struct{}
}

// MockLanguageServiceMockRecorder is the mock recorder for MockLanguageService.
type MockLanguageServiceMockRecorder struct {
	mock *MockLanguageService
}

// NewMockLanguageService creates a new mock instance.
func NewMockLanguageService(ctrl *gomock.Controller) *MockLanguageService {
	mock := &MockLanguageService{ctrl: ctrl}
	mock.recorder = &MockLanguageServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLanguageService) EXPECT() *MockLanguageServiceMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockLanguageService) GetAll(tx *gorm.DB) ([]schemas.LanguageConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", tx)
	ret0, _ := ret[0].([]schemas.LanguageConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockLanguageServiceMockRecorder) GetAll(tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockLanguageService)(nil).GetAll), tx)
}

// GetAllEnabled mocks base method.
func (m *MockLanguageService) GetAllEnabled(tx *gorm.DB) ([]schemas.LanguageConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllEnabled", tx)
	ret0, _ := ret[0].([]schemas.LanguageConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllEnabled indicates an expected call of GetAllEnabled.
func (mr *MockLanguageServiceMockRecorder) GetAllEnabled(tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllEnabled", reflect.TypeOf((*MockLanguageService)(nil).GetAllEnabled), tx)
}

// Init mocks base method.
func (m *MockLanguageService) Init(tx *gorm.DB, enabledLanguages schemas.HandShakeResponsePayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", tx, enabledLanguages)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockLanguageServiceMockRecorder) Init(tx, enabledLanguages any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockLanguageService)(nil).Init), tx, enabledLanguages)
}

// MockTaskService is a mock of TaskService interface.
type MockTaskService struct {
	ctrl     *gomock.Controller
	recorder *MockTaskServiceMockRecorder
	isgomock struct{}
}

// MockTaskServiceMockRecorder is the mock recorder for MockTaskService.
type MockTaskServiceMockRecorder struct {
	mock *MockTaskService
}

// NewMockTaskService creates a new mock instance.
func NewMockTaskService(ctrl *gomock.Controller) *MockTaskService {
	mock := &MockTaskService{ctrl: ctrl}
	mock.recorder = &MockTaskServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskService) EXPECT() *MockTaskServiceMockRecorder {
	return m.recorder
}

// AssignToGroups mocks base method.
func (m *MockTaskService) AssignToGroups(tx *gorm.DB, currentUser schemas.User, taskID int64, groupIDs []int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignToGroups", tx, currentUser, taskID, groupIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignToGroups indicates an expected call of AssignToGroups.
func (mr *MockTaskServiceMockRecorder) AssignToGroups(tx, currentUser, taskID, groupIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignToGroups", reflect.TypeOf((*MockTaskService)(nil).AssignToGroups), tx, currentUser, taskID, groupIDs)
}

// AssignToUsers mocks base method.
func (m *MockTaskService) AssignToUsers(tx *gorm.DB, currentUser schemas.User, taskID int64, userIDs []int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignToUsers", tx, currentUser, taskID, userIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignToUsers indicates an expected call of AssignToUsers.
func (mr *MockTaskServiceMockRecorder) AssignToUsers(tx, currentUser, taskID, userIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignToUsers", reflect.TypeOf((*MockTaskService)(nil).AssignToUsers), tx, currentUser, taskID, userIDs)
}

// Create mocks base method.
func (m *MockTaskService) Create(tx *gorm.DB, currentUser schemas.User, task *schemas.Task) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", tx, currentUser, task)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTaskServiceMockRecorder) Create(tx, currentUser, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTaskService)(nil).Create), tx, currentUser, task)
}

// CreateInputOutput mocks base method.
func (m *MockTaskService) CreateInputOutput(tx *gorm.DB, taskID int64, archivePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInputOutput", tx, taskID, archivePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateInputOutput indicates an expected call of CreateInputOutput.
func (mr *MockTaskServiceMockRecorder) CreateInputOutput(tx, taskID, archivePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInputOutput", reflect.TypeOf((*MockTaskService)(nil).CreateInputOutput), tx, taskID, archivePath)
}

// Delete mocks base method.
func (m *MockTaskService) Delete(tx *gorm.DB, currentUser schemas.User, taskID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", tx, currentUser, taskID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTaskServiceMockRecorder) Delete(tx, currentUser, taskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTaskService)(nil).Delete), tx, currentUser, taskID)
}

// Edit mocks base method.
func (m *MockTaskService) Edit(tx *gorm.DB, currentUser schemas.User, taskID int64, updateInfo *schemas.EditTask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", tx, currentUser, taskID, updateInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Edit indicates an expected call of Edit.
func (mr *MockTaskServiceMockRecorder) Edit(tx, currentUser, taskID, updateInfo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockTaskService)(nil).Edit), tx, currentUser, taskID, updateInfo)
}

// Get mocks base method.
func (m *MockTaskService) Get(tx *gorm.DB, currentUser schemas.User, taskID int64) (*schemas.TaskDetailed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", tx, currentUser, taskID)
	ret0, _ := ret[0].(*schemas.TaskDetailed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTaskServiceMockRecorder) Get(tx, currentUser, taskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTaskService)(nil).Get), tx, currentUser, taskID)
}

// GetAll mocks base method.
func (m *MockTaskService) GetAll(tx *gorm.DB, currentUser schemas.User, queryParams map[string]any) ([]schemas.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", tx, currentUser, queryParams)
	ret0, _ := ret[0].([]schemas.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockTaskServiceMockRecorder) GetAll(tx, currentUser, queryParams any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockTaskService)(nil).GetAll), tx, currentUser, queryParams)
}

// GetAllAssigned mocks base method.
func (m *MockTaskService) GetAllAssigned(tx *gorm.DB, currentUser schemas.User, queryParams map[string]any) ([]schemas.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAssigned", tx, currentUser, queryParams)
	ret0, _ := ret[0].([]schemas.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAssigned indicates an expected call of GetAllAssigned.
func (mr *MockTaskServiceMockRecorder) GetAllAssigned(tx, currentUser, queryParams any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAssigned", reflect.TypeOf((*MockTaskService)(nil).GetAllAssigned), tx, currentUser, queryParams)
}

// GetAllCreated mocks base method.
func (m *MockTaskService) GetAllCreated(tx *gorm.DB, currentUser schemas.User, queryParams map[string]any) ([]schemas.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCreated", tx, currentUser, queryParams)
	ret0, _ := ret[0].([]schemas.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCreated indicates an expected call of GetAllCreated.
func (mr *MockTaskServiceMockRecorder) GetAllCreated(tx, currentUser, queryParams any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCreated", reflect.TypeOf((*MockTaskService)(nil).GetAllCreated), tx, currentUser, queryParams)
}

// GetAllForGroup mocks base method.
func (m *MockTaskService) GetAllForGroup(tx *gorm.DB, currentUser schemas.User, groupID int64, queryParams map[string]any) ([]schemas.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllForGroup", tx, currentUser, groupID, queryParams)
	ret0, _ := ret[0].([]schemas.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllForGroup indicates an expected call of GetAllForGroup.
func (mr *MockTaskServiceMockRecorder) GetAllForGroup(tx, currentUser, groupID, queryParams any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllForGroup", reflect.TypeOf((*MockTaskService)(nil).GetAllForGroup), tx, currentUser, groupID, queryParams)
}

// GetByTitle mocks base method.
func (m *MockTaskService) GetByTitle(tx *gorm.DB, title string) (*schemas.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTitle", tx, title)
	ret0, _ := ret[0].(*schemas.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTitle indicates an expected call of GetByTitle.
func (mr *MockTaskServiceMockRecorder) GetByTitle(tx, title any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTitle", reflect.TypeOf((*MockTaskService)(nil).GetByTitle), tx, title)
}

// ParseInputOutput mocks base method.
func (m *MockTaskService) ParseInputOutput(archivePath string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseInputOutput", archivePath)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseInputOutput indicates an expected call of ParseInputOutput.
func (mr *MockTaskServiceMockRecorder) ParseInputOutput(archivePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseInputOutput", reflect.TypeOf((*MockTaskService)(nil).ParseInputOutput), archivePath)
}

// ProcessAndUpload mocks base method.
func (m *MockTaskService) ProcessAndUpload(tx *gorm.DB, currentUser schemas.User, taskID int64, archivePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessAndUpload", tx, currentUser, taskID, archivePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessAndUpload indicates an expected call of ProcessAndUpload.
func (mr *MockTaskServiceMockRecorder) ProcessAndUpload(tx, currentUser, taskID, archivePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessAndUpload", reflect.TypeOf((*MockTaskService)(nil).ProcessAndUpload), tx, currentUser, taskID, archivePath)
}

// UnassignFromGroups mocks base method.
func (m *MockTaskService) UnassignFromGroups(tx *gorm.DB, currentUser schemas.User, taskID int64, groupIDs []int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnassignFromGroups", tx, currentUser, taskID, groupIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnassignFromGroups indicates an expected call of UnassignFromGroups.
func (mr *MockTaskServiceMockRecorder) UnassignFromGroups(tx, currentUser, taskID, groupIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnassignFromGroups", reflect.TypeOf((*MockTaskService)(nil).UnassignFromGroups), tx, currentUser, taskID, groupIDs)
}

// UnassignFromUsers mocks base method.
func (m *MockTaskService) UnassignFromUsers(tx *gorm.DB, currentUser schemas.User, taskID int64, userID []int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnassignFromUsers", tx, currentUser, taskID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnassignFromUsers indicates an expected call of UnassignFromUsers.
func (mr *MockTaskServiceMockRecorder) UnassignFromUsers(tx, currentUser, taskID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnassignFromUsers", reflect.TypeOf((*MockTaskService)(nil).UnassignFromUsers), tx, currentUser, taskID, userID)
}

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
	isgomock struct{}
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// ChangePassword mocks base method.
func (m *MockUserService) ChangePassword(tx *gorm.DB, currentUser schemas.User, userID int64, data *schemas.UserChangePassword) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePassword", tx, currentUser, userID, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangePassword indicates an expected call of ChangePassword.
func (mr *MockUserServiceMockRecorder) ChangePassword(tx, currentUser, userID, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockUserService)(nil).ChangePassword), tx, currentUser, userID, data)
}

// ChangeRole mocks base method.
func (m *MockUserService) ChangeRole(tx *gorm.DB, currentUser schemas.User, userID int64, role types.UserRole) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeRole", tx, currentUser, userID, role)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeRole indicates an expected call of ChangeRole.
func (mr *MockUserServiceMockRecorder) ChangeRole(tx, currentUser, userID, role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeRole", reflect.TypeOf((*MockUserService)(nil).ChangeRole), tx, currentUser, userID, role)
}

// Edit mocks base method.
func (m *MockUserService) Edit(tx *gorm.DB, currentUser schemas.User, userID int64, updateInfo *schemas.UserEdit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", tx, currentUser, userID, updateInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Edit indicates an expected call of Edit.
func (mr *MockUserServiceMockRecorder) Edit(tx, currentUser, userID, updateInfo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockUserService)(nil).Edit), tx, currentUser, userID, updateInfo)
}

// Get mocks base method.
func (m *MockUserService) Get(tx *gorm.DB, userID int64) (*schemas.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", tx, userID)
	ret0, _ := ret[0].(*schemas.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUserServiceMockRecorder) Get(tx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUserService)(nil).Get), tx, userID)
}

// GetAll mocks base method.
func (m *MockUserService) GetAll(tx *gorm.DB, queryParams map[string]any) ([]schemas.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", tx, queryParams)
	ret0, _ := ret[0].([]schemas.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockUserServiceMockRecorder) GetAll(tx, queryParams any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockUserService)(nil).GetAll), tx, queryParams)
}

// GetByEmail mocks base method.
func (m *MockUserService) GetByEmail(tx *gorm.DB, email string) (*schemas.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", tx, email)
	ret0, _ := ret[0].(*schemas.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockUserServiceMockRecorder) GetByEmail(tx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockUserService)(nil).GetByEmail), tx, email)
}

// MockSessionService is a mock of SessionService interface.
type MockSessionService struct {
	ctrl     *gomock.Controller
	recorder *MockSessionServiceMockRecorder
	isgomock struct{}
}

// MockSessionServiceMockRecorder is the mock recorder for MockSessionService.
type MockSessionServiceMockRecorder struct {
	mock *MockSessionService
}

// NewMockSessionService creates a new mock instance.
func NewMockSessionService(ctrl *gomock.Controller) *MockSessionService {
	mock := &MockSessionService{ctrl: ctrl}
	mock.recorder = &MockSessionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionService) EXPECT() *MockSessionServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSessionService) Create(tx *gorm.DB, userID int64) (*schemas.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", tx, userID)
	ret0, _ := ret[0].(*schemas.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSessionServiceMockRecorder) Create(tx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSessionService)(nil).Create), tx, userID)
}

// Invalidate mocks base method.
func (m *MockSessionService) Invalidate(tx *gorm.DB, sessionID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Invalidate", tx, sessionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Invalidate indicates an expected call of Invalidate.
func (mr *MockSessionServiceMockRecorder) Invalidate(tx, sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Invalidate", reflect.TypeOf((*MockSessionService)(nil).Invalidate), tx, sessionID)
}

// Validate mocks base method.
func (m *MockSessionService) Validate(tx *gorm.DB, sessionID string) (schemas.ValidateSessionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", tx, sessionID)
	ret0, _ := ret[0].(schemas.ValidateSessionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Validate indicates an expected call of Validate.
func (mr *MockSessionServiceMockRecorder) Validate(tx, sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockSessionService)(nil).Validate), tx, sessionID)
}

// MockAuthService is a mock of AuthService interface.
type MockAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceMockRecorder
	isgomock struct{}
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService.
type MockAuthServiceMockRecorder struct {
	mock *MockAuthService
}

// NewMockAuthService creates a new mock instance.
func NewMockAuthService(ctrl *gomock.Controller) *MockAuthService {
	mock := &MockAuthService{ctrl: ctrl}
	mock.recorder = &MockAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService) EXPECT() *MockAuthServiceMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockAuthService) Login(tx *gorm.DB, userLogin schemas.UserLoginRequest) (*schemas.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", tx, userLogin)
	ret0, _ := ret[0].(*schemas.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockAuthServiceMockRecorder) Login(tx, userLogin any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthService)(nil).Login), tx, userLogin)
}

// Register mocks base method.
func (m *MockAuthService) Register(tx *gorm.DB, userRegister schemas.UserRegisterRequest) (*schemas.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", tx, userRegister)
	ret0, _ := ret[0].(*schemas.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockAuthServiceMockRecorder) Register(tx, userRegister any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockAuthService)(nil).Register), tx, userRegister)
}
