// Code generated by MockGen. DO NOT EDIT.
// Source: ./package/service (interfaces: SubmissionService,QueueService)
//
// Generated by this command:
//
//	mockgen -destination package/service/mocks/submission_service_mock.go ./package/service SubmissionService,QueueService
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"
	sync "sync"

	schemas "github.com/mini-maxit/backend/package/domain/schemas"
	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockSubmissionService is a mock of SubmissionService interface.
type MockSubmissionService struct {
	ctrl     *gomock.Controller
	recorder *MockSubmissionServiceMockRecorder
	isgomock struct{}
}

// MockSubmissionServiceMockRecorder is the mock recorder for MockSubmissionService.
type MockSubmissionServiceMockRecorder struct {
	mock *MockSubmissionService
}

// NewMockSubmissionService creates a new mock instance.
func NewMockSubmissionService(ctrl *gomock.Controller) *MockSubmissionService {
	mock := &MockSubmissionService{ctrl: ctrl}
	mock.recorder = &MockSubmissionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubmissionService) EXPECT() *MockSubmissionServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSubmissionService) Create(tx *gorm.DB, taskID, userID, languageID int64, order int, fileID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", tx, taskID, userID, languageID, order, fileID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSubmissionServiceMockRecorder) Create(tx, taskID, userID, languageID, order, fileID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSubmissionService)(nil).Create), tx, taskID, userID, languageID, order, fileID)
}

// CreateSubmissionResult mocks base method.
func (m *MockSubmissionService) CreateSubmissionResult(tx *gorm.DB, submissionID int64, responseMessage schemas.QueueResponseMessage) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubmissionResult", tx, submissionID, responseMessage)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubmissionResult indicates an expected call of CreateSubmissionResult.
func (mr *MockSubmissionServiceMockRecorder) CreateSubmissionResult(tx, submissionID, responseMessage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubmissionResult", reflect.TypeOf((*MockSubmissionService)(nil).CreateSubmissionResult), tx, submissionID, responseMessage)
}

// Get mocks base method.
func (m *MockSubmissionService) Get(tx *gorm.DB, submissionID int64, user schemas.User) (schemas.Submission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", tx, submissionID, user)
	ret0, _ := ret[0].(schemas.Submission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSubmissionServiceMockRecorder) Get(tx, submissionID, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSubmissionService)(nil).Get), tx, submissionID, user)
}

// GetAll mocks base method.
func (m *MockSubmissionService) GetAll(tx *gorm.DB, user schemas.User, queryParams map[string]any) ([]schemas.Submission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", tx, user, queryParams)
	ret0, _ := ret[0].([]schemas.Submission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockSubmissionServiceMockRecorder) GetAll(tx, user, queryParams any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockSubmissionService)(nil).GetAll), tx, user, queryParams)
}

// GetAllForGroup mocks base method.
func (m *MockSubmissionService) GetAllForGroup(tx *gorm.DB, groupID int64, user schemas.User, queryParams map[string]any) ([]schemas.Submission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllForGroup", tx, groupID, user, queryParams)
	ret0, _ := ret[0].([]schemas.Submission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllForGroup indicates an expected call of GetAllForGroup.
func (mr *MockSubmissionServiceMockRecorder) GetAllForGroup(tx, groupID, user, queryParams any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllForGroup", reflect.TypeOf((*MockSubmissionService)(nil).GetAllForGroup), tx, groupID, user, queryParams)
}

// GetAllForTask mocks base method.
func (m *MockSubmissionService) GetAllForTask(tx *gorm.DB, taskID int64, user schemas.User, queryParams map[string]any) ([]schemas.Submission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllForTask", tx, taskID, user, queryParams)
	ret0, _ := ret[0].([]schemas.Submission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllForTask indicates an expected call of GetAllForTask.
func (mr *MockSubmissionServiceMockRecorder) GetAllForTask(tx, taskID, user, queryParams any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllForTask", reflect.TypeOf((*MockSubmissionService)(nil).GetAllForTask), tx, taskID, user, queryParams)
}

// GetAllForUser mocks base method.
func (m *MockSubmissionService) GetAllForUser(tx *gorm.DB, userID int64, user schemas.User, queryParams map[string]any) ([]schemas.Submission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllForUser", tx, userID, user, queryParams)
	ret0, _ := ret[0].([]schemas.Submission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllForUser indicates an expected call of GetAllForUser.
func (mr *MockSubmissionServiceMockRecorder) GetAllForUser(tx, userID, user, queryParams any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllForUser", reflect.TypeOf((*MockSubmissionService)(nil).GetAllForUser), tx, userID, user, queryParams)
}

// GetAllForUserShort mocks base method.
func (m *MockSubmissionService) GetAllForUserShort(tx *gorm.DB, userID int64, user schemas.User, queryParams map[string]any) ([]schemas.SubmissionShort, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllForUserShort", tx, userID, user, queryParams)
	ret0, _ := ret[0].([]schemas.SubmissionShort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllForUserShort indicates an expected call of GetAllForUserShort.
func (mr *MockSubmissionServiceMockRecorder) GetAllForUserShort(tx, userID, user, queryParams any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllForUserShort", reflect.TypeOf((*MockSubmissionService)(nil).GetAllForUserShort), tx, userID, user, queryParams)
}

// GetAvailableLanguages mocks base method.
func (m *MockSubmissionService) GetAvailableLanguages(tx *gorm.DB) ([]schemas.LanguageConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableLanguages", tx)
	ret0, _ := ret[0].([]schemas.LanguageConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableLanguages indicates an expected call of GetAvailableLanguages.
func (mr *MockSubmissionServiceMockRecorder) GetAvailableLanguages(tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableLanguages", reflect.TypeOf((*MockSubmissionService)(nil).GetAvailableLanguages), tx)
}

// MarkComplete mocks base method.
func (m *MockSubmissionService) MarkComplete(tx *gorm.DB, submissionID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkComplete", tx, submissionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkComplete indicates an expected call of MarkComplete.
func (mr *MockSubmissionServiceMockRecorder) MarkComplete(tx, submissionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkComplete", reflect.TypeOf((*MockSubmissionService)(nil).MarkComplete), tx, submissionID)
}

// MarkFailed mocks base method.
func (m *MockSubmissionService) MarkFailed(tx *gorm.DB, submissionID int64, errorMsg string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkFailed", tx, submissionID, errorMsg)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkFailed indicates an expected call of MarkFailed.
func (mr *MockSubmissionServiceMockRecorder) MarkFailed(tx, submissionID, errorMsg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkFailed", reflect.TypeOf((*MockSubmissionService)(nil).MarkFailed), tx, submissionID, errorMsg)
}

// MarkProcessing mocks base method.
func (m *MockSubmissionService) MarkProcessing(tx *gorm.DB, submissionID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkProcessing", tx, submissionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkProcessing indicates an expected call of MarkProcessing.
func (mr *MockSubmissionServiceMockRecorder) MarkProcessing(tx, submissionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkProcessing", reflect.TypeOf((*MockSubmissionService)(nil).MarkProcessing), tx, submissionID)
}

// Submit mocks base method.
func (m *MockSubmissionService) Submit(tx *gorm.DB, user *schemas.User, taskID, languageID int64, submissionFilePath string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Submit", tx, user, taskID, languageID, submissionFilePath)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Submit indicates an expected call of Submit.
func (mr *MockSubmissionServiceMockRecorder) Submit(tx, user, taskID, languageID, submissionFilePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Submit", reflect.TypeOf((*MockSubmissionService)(nil).Submit), tx, user, taskID, languageID, submissionFilePath)
}

// MockQueueService is a mock of QueueService interface.
type MockQueueService struct {
	ctrl     *gomock.Controller
	recorder *MockQueueServiceMockRecorder
	isgomock struct{}
}

// MockQueueServiceMockRecorder is the mock recorder for MockQueueService.
type MockQueueServiceMockRecorder struct {
	mock *MockQueueService
}

// NewMockQueueService creates a new mock instance.
func NewMockQueueService(ctrl *gomock.Controller) *MockQueueService {
	mock := &MockQueueService{ctrl: ctrl}
	mock.recorder = &MockQueueServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueueService) EXPECT() *MockQueueServiceMockRecorder {
	return m.recorder
}

// GetSubmissionID mocks base method.
func (m *MockQueueService) GetSubmissionID(tx *gorm.DB, messageID string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubmissionID", tx, messageID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubmissionID indicates an expected call of GetSubmissionID.
func (mr *MockQueueServiceMockRecorder) GetSubmissionID(tx, messageID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubmissionID", reflect.TypeOf((*MockQueueService)(nil).GetSubmissionID), tx, messageID)
}

// LastWorkerStatus mocks base method.
func (m *MockQueueService) LastWorkerStatus() schemas.WorkerStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastWorkerStatus")
	ret0, _ := ret[0].(schemas.WorkerStatus)
	return ret0
}

// LastWorkerStatus indicates an expected call of LastWorkerStatus.
func (mr *MockQueueServiceMockRecorder) LastWorkerStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastWorkerStatus", reflect.TypeOf((*MockQueueService)(nil).LastWorkerStatus))
}

// PublishHandshake mocks base method.
func (m *MockQueueService) PublishHandshake() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishHandshake")
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishHandshake indicates an expected call of PublishHandshake.
func (mr *MockQueueServiceMockRecorder) PublishHandshake() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishHandshake", reflect.TypeOf((*MockQueueService)(nil).PublishHandshake))
}

// PublishSubmission mocks base method.
func (m *MockQueueService) PublishSubmission(tx *gorm.DB, submissionID, submissionResultID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishSubmission", tx, submissionID, submissionResultID)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishSubmission indicates an expected call of PublishSubmission.
func (mr *MockQueueServiceMockRecorder) PublishSubmission(tx, submissionID, submissionResultID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishSubmission", reflect.TypeOf((*MockQueueService)(nil).PublishSubmission), tx, submissionID, submissionResultID)
}

// PublishWorkerStatus mocks base method.
func (m *MockQueueService) PublishWorkerStatus() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishWorkerStatus")
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishWorkerStatus indicates an expected call of PublishWorkerStatus.
func (mr *MockQueueServiceMockRecorder) PublishWorkerStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishWorkerStatus", reflect.TypeOf((*MockQueueService)(nil).PublishWorkerStatus))
}

// StatusCond mocks base method.
func (m *MockQueueService) StatusCond() *sync.Cond {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatusCond")
	ret0, _ := ret[0].(*sync.Cond)
	return ret0
}

// StatusCond indicates an expected call of StatusCond.
func (mr *MockQueueServiceMockRecorder) StatusCond() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusCond", reflect.TypeOf((*MockQueueService)(nil).StatusCond))
}

// StatusMux mocks base method.
func (m *MockQueueService) StatusMux() *sync.Mutex {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatusMux")
	ret0, _ := ret[0].(*sync.Mutex)
	return ret0
}

// StatusMux indicates an expected call of StatusMux.
func (mr *MockQueueServiceMockRecorder) StatusMux() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusMux", reflect.TypeOf((*MockQueueService)(nil).StatusMux))
}

// UpdateWorkerStatus mocks base method.
func (m *MockQueueService) UpdateWorkerStatus(statusResponse schemas.StatusResponsePayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkerStatus", statusResponse)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWorkerStatus indicates an expected call of UpdateWorkerStatus.
func (mr *MockQueueServiceMockRecorder) UpdateWorkerStatus(statusResponse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkerStatus", reflect.TypeOf((*MockQueueService)(nil).UpdateWorkerStatus), statusResponse)
}
